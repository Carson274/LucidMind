// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 3.7.2 (stable) (Tue Mar 11 04:27:50 2025 -0700) on "macos_arm64"
// Module: packages/w_common/src/common/disposable
// Flags: soundNullSafety(true), enableAsserts(true)
define(['dart_sdk', 'packages/logging/logging'], (function load__packages__w_common__src__common__disposable(dart_sdk, packages__logging__logging) {
  'use strict';
  const dart_rti = dart_sdk.dart_rti;
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const _internal = dart_sdk._internal;
  const _js_helper = dart_sdk._js_helper;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const logger = packages__logging__logging.src__logger;
  var managed_stream_subscription = Object.create(dart.library);
  var disposable = Object.create(dart.library);
  var disposable_state = Object.create(dart.library);
  var disposable_manager = Object.create(dart.library);
  var $isNotEmpty = dartx.isNotEmpty;
  var $toList = dartx.toList;
  dart._checkModuleNullSafetyMode(true);
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C1() {
      return C[1] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "initialized",
        [_Enum_index]: 0
      }, disposable_state.DisposableState.prototype));
    },
    get C2() {
      return C[2] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "awaitingDisposal",
        [_Enum_index]: 1
      }, disposable_state.DisposableState.prototype));
    },
    get C3() {
      return C[3] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "disposing",
        [_Enum_index]: 2
      }, disposable_state.DisposableState.prototype));
    },
    get C4() {
      return C[4] = dart.const(Object.setPrototypeOf({
        [_Enum__name]: "disposed",
        [_Enum_index]: 3
      }, disposable_state.DisposableState.prototype));
    },
    get C0() {
      return C[0] = dart.constList(dart_rti._Universe.eval(dart_rti._theUniverse(), "w_common__src__common__disposable_state|DisposableState", true), [C[1] || CT.C1, C[2] || CT.C2, C[3] || CT.C3, C[4] || CT.C4]);
    }
  });
  var C = Array(5).fill(void 0);
  var I = [
    "package:w_common/src/common/managed_stream_subscription.dart",
    "dart:core",
    "dart:async",
    "package:w_common/src/common/disposable.dart",
    "package:logging/src/logger.dart",
    "dart:collection",
    "package:w_common/src/common/disposable_state.dart",
    "package:w_common/src/common/disposable_manager.dart"
  ];
  var _didComplete = dart.privateName(managed_stream_subscription, "_didComplete");
  var _cancelOnError = dart.privateName(managed_stream_subscription, "_cancelOnError");
  var _subscription = dart.privateName(managed_stream_subscription, "_subscription");
  var _wrapOnDone = dart.privateName(managed_stream_subscription, "_wrapOnDone");
  var _wrapOnError = dart.privateName(managed_stream_subscription, "_wrapOnError");
  var _bind = dart.privateName(dart_rti, "_bind");
  var _eval = dart.privateName(dart_rti, "_eval");
  var _complete = dart.privateName(managed_stream_subscription, "_complete");
  var _as = dart.privateName(dart_rti, "_as");
  var _is = dart.privateName(dart_rti, "_is");
  managed_stream_subscription.ManagedStreamSubscription = class ManagedStreamSubscription extends core.Object {
    static ['_#new#tearOff'](T, stream, onData, opts) {
      let onError = opts && 'onError' in opts ? opts.onError : null;
      let onDone = opts && 'onDone' in opts ? opts.onDone : null;
      let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
      return new managed_stream_subscription.ManagedStreamSubscription.new(dart_rti.instanceType(this)[_bind](T)[_eval]("w_common__src__common__managed_stream_subscription|ManagedStreamSubscription<1>"), stream, onData, {onError: onError, onDone: onDone, cancelOnError: cancelOnError});
    }
    get didComplete() {
      return this[_didComplete].future;
    }
    get isPaused() {
      return this[_subscription].isPaused;
    }
    asFuture(E, futureValue = null) {
      return this[_subscription].asFuture(dart_rti.instanceType(this)[_bind](E)[_eval]("1"), futureValue).whenComplete(dart.bind(this, _complete));
    }
    cancel() {
      let result = this[_subscription].cancel();
      if (result === null) {
        this[_complete]();
        return async.Future.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Future<~>", true), dart.fn(() => {
        }, dart_rti._Universe.eval(dart_rti._theUniverse(), "core|Null()", true)));
      }
      return result.then(dart_rti._Universe.eval(dart_rti._theUniverse(), "~", true), dart.fn(_ => {
        this[_complete]();
      }, dart_rti._Universe.eval(dart_rti._theUniverse(), "core|Null(~)", true)));
    }
    onData(handleData) {
      return this[_subscription].onData(handleData);
    }
    onDone(handleDone) {
      return this[_wrapOnDone](handleDone);
    }
    onError(handleError) {
      return this[_wrapOnError](handleError);
    }
    pause(resumeSignal = null) {
      return this[_subscription].pause(resumeSignal);
    }
    resume() {
      return this[_subscription].resume();
    }
    [_complete]() {
      if (!this[_didComplete].isCompleted) {
        this[_didComplete].complete();
      }
    }
    [_wrapOnDone](handleDone) {
      this[_subscription].onDone(dart.fn(() => {
        if (handleDone != null) {
          handleDone();
        }
        this[_complete]();
      }, dart_rti._Universe.eval(dart_rti._theUniverse(), "~()", true)));
    }
    [_wrapOnError](handleError) {
      this[_subscription].onError(dart.fn((error, stackTrace) => {
        if (handleError == null) {
          async.Zone.current.handleUncaughtError(dart_rti._Universe.eval(dart_rti._theUniverse(), "core|Object", true)[_as](error), dart_rti._Universe.eval(dart_rti._theUniverse(), "core|StackTrace", true)[_as](stackTrace));
        } else {
          if (dart_rti._Universe.eval(dart_rti._theUniverse(), "@(core|Object,core|StackTrace)", true)[_is](handleError)) {
            handleError(dart_rti._Universe.eval(dart_rti._theUniverse(), "core|Object", true)[_as](error), dart_rti._Universe.eval(dart_rti._theUniverse(), "core|StackTrace", true)[_as](stackTrace));
          } else {
            dart.dcall(handleError, [error]);
          }
        }
        if (this[_cancelOnError]) {
          this[_complete]();
        }
      }, dart_rti._Universe.eval(dart_rti._theUniverse(), "core|Null(@,@)", true)));
    }
  };
  (managed_stream_subscription.ManagedStreamSubscription.new = function(_ti, stream, onData, opts) {
    let t$360;
    let onError = opts && 'onError' in opts ? opts.onError : null;
    let onDone = opts && 'onDone' in opts ? opts.onDone : null;
    let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
    this.$ti = this.$ti || _ti || dart.getReifiedType(this);
    this[_didComplete] = async.Completer.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Completer<core|Null>", true));
    this[_cancelOnError] = (t$360 = cancelOnError, t$360 == null ? false : t$360);
    this[_subscription] = stream.listen(onData, {cancelOnError: cancelOnError});
    this[_wrapOnDone](onDone);
    this[_wrapOnError](onError);
  }).prototype = managed_stream_subscription.ManagedStreamSubscription.prototype;
  dart.addRtiResources(managed_stream_subscription.ManagedStreamSubscription, ["w_common__src__common__managed_stream_subscription|ManagedStreamSubscription", "async|StreamSubscription"]);
  dart.setMethodSignature(managed_stream_subscription.ManagedStreamSubscription, () => dart.global.Object.setPrototypeOf({
    asFuture: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Future<0^>([0^?])<core|Object?>", true),
    cancel: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Future<~>()", true),
    onData: _ti => _ti[_eval]("~(~(ManagedStreamSubscription.T)?)"),
    onDone: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "~(~()?)", true),
    onError: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "~(core|Function?)", true),
    pause: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "~([async|Future<~>?])", true),
    resume: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "~()", true),
    [_complete]: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "~()", true),
    [_wrapOnDone]: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "~(~()?)", true),
    [_wrapOnError]: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "~(core|Function?)", true)
  }, dart.getMethods(dart.global.Object.getPrototypeOf(managed_stream_subscription.ManagedStreamSubscription))));
  dart.setMethodsDefaultTypeArgSignature(managed_stream_subscription.ManagedStreamSubscription, () => dart.global.Object.setPrototypeOf({
    asFuture: _ti => [dart_rti._Universe.eval(dart_rti._theUniverse(), "@", true)]
  }, dart.getMethodsDefaultTypeArgs(dart.global.Object.getPrototypeOf(managed_stream_subscription.ManagedStreamSubscription))));
  dart.setGetterSignature(managed_stream_subscription.ManagedStreamSubscription, () => dart.global.Object.setPrototypeOf({
    didComplete: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Future<core|Null>", true),
    isPaused: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool", true)
  }, dart.getGetters(dart.global.Object.getPrototypeOf(managed_stream_subscription.ManagedStreamSubscription))));
  dart.setLibraryUri(managed_stream_subscription.ManagedStreamSubscription, I[0]);
  dart.setFieldSignature(managed_stream_subscription.ManagedStreamSubscription, () => dart.global.Object.setPrototypeOf({
    [_cancelOnError]: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool", true),
      isConst: false,
      isFinal: true,
      libraryUri: I[1]
    },
    [_subscription]: {
      type: _ti => _ti[_eval]("async|StreamSubscription<ManagedStreamSubscription.T>"),
      isConst: false,
      isFinal: true,
      libraryUri: I[2]
    },
    [_didComplete]: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Completer<core|Null>", true),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    }
  }, dart.getFields(dart.global.Object.getPrototypeOf(managed_stream_subscription.ManagedStreamSubscription))));
  disposable._Disposable = class _Disposable extends core.Object {};
  (disposable._Disposable.new = function() {
    ;
  }).prototype = disposable._Disposable.prototype;
  dart.addRtiResources(disposable._Disposable, ["w_common__src__common__disposable|_Disposable"]);
  dart.setLibraryUri(disposable._Disposable, I[3]);
  var _didDispose = dart.privateName(disposable, "_didDispose");
  var _isDisposing = dart.privateName(disposable, "_isDisposing");
  var _disposer = dart.privateName(disposable, "_disposer");
  disposable.ManagedDisposer = class ManagedDisposer extends core.Object {
    static ['_#new#tearOff'](_disposer) {
      return new disposable.ManagedDisposer.new(_disposer);
    }
    get didDispose() {
      return this[_didDispose].future;
    }
    get isDisposed() {
      return this[_didDispose].isCompleted;
    }
    get isDisposedOrDisposing() {
      return this.isDisposed || this.isDisposing;
    }
    get isDisposing() {
      return this[_isDisposing];
    }
    dispose() {
      let t$360;
      if (this.isDisposedOrDisposing) {
        return this.didDispose;
      }
      this[_isDisposing] = true;
      let disposeFuture = this[_disposer] != null ? (t$360 = dart.nullCheck(this[_disposer])(), t$360 == null ? async.Future.value(dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Future<@>", true)) : t$360) : async.Future.value(dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Future<@>", true));
      this[_disposer] = null;
      return disposeFuture.then(dart_rti._Universe.eval(dart_rti._theUniverse(), "core|Null", true), dart.fn(_ => {
        this[_disposer] = null;
        this[_didDispose].complete();
        this[_isDisposing] = false;
      }, dart_rti._Universe.eval(dart_rti._theUniverse(), "core|Null(@)", true)));
    }
  };
  (disposable.ManagedDisposer.new = function(_disposer$) {
    this[_didDispose] = async.Completer.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Completer<core|Null>", true));
    this[_isDisposing] = false;
    this[_disposer] = _disposer$;
    ;
  }).prototype = disposable.ManagedDisposer.prototype;
  dart.addRtiResources(disposable.ManagedDisposer, ["w_common__src__common__disposable|ManagedDisposer", "w_common__src__common__disposable|_Disposable"]);
  dart.setMethodSignature(disposable.ManagedDisposer, () => dart.global.Object.setPrototypeOf({
    dispose: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Future<core|Null>()", true)
  }, dart.getMethods(dart.global.Object.getPrototypeOf(disposable.ManagedDisposer))));
  dart.setGetterSignature(disposable.ManagedDisposer, () => dart.global.Object.setPrototypeOf({
    didDispose: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Future<core|Null>", true),
    isDisposed: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool", true),
    isDisposedOrDisposing: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool", true),
    isDisposing: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool", true)
  }, dart.getGetters(dart.global.Object.getPrototypeOf(disposable.ManagedDisposer))));
  dart.setLibraryUri(disposable.ManagedDisposer, I[3]);
  dart.setFieldSignature(disposable.ManagedDisposer, () => dart.global.Object.setPrototypeOf({
    [_disposer]: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Future<@>?()?", true),
      isConst: false,
      isFinal: false
    },
    [_didDispose]: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Completer<core|Null>", true),
      isConst: false,
      isFinal: true,
      libraryUri: I[2]
    },
    [_isDisposing]: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool", true),
      isConst: false,
      isFinal: false,
      libraryUri: I[1]
    }
  }, dart.getFields(dart.global.Object.getPrototypeOf(disposable.ManagedDisposer))));
  var _didConclude = dart.privateName(disposable, "_didConclude");
  var ___ObservableTimer__timer = dart.privateName(disposable, "_#_ObservableTimer#_timer");
  var _timer = dart.privateName(disposable, "_timer");
  var _complete$ = dart.privateName(disposable, "_complete");
  disposable._ObservableTimer = class _ObservableTimer extends core.Object {
    get [_timer]() {
      let t$360;
      t$360 = this[___ObservableTimer__timer];
      return t$360 == null ? dart.throw(new _internal.LateError.fieldNI("_timer")) : t$360;
    }
    set [_timer](_timer$35param) {
      this[___ObservableTimer__timer] = _timer$35param;
    }
    static ['_#new#tearOff'](duration, callback) {
      return new disposable._ObservableTimer.new(duration, callback);
    }
    static ['_#periodic#tearOff'](duration, callback) {
      return new disposable._ObservableTimer.periodic(duration, callback);
    }
    [_complete$]() {
      if (!this[_didConclude].isCompleted) {
        this[_didConclude].complete();
      }
    }
    get didConclude() {
      return this[_didConclude].future;
    }
    cancel() {
      this[_timer].cancel();
      this[_complete$]();
    }
    get isActive() {
      return this[_timer].isActive;
    }
    get tick() {
      return this[_timer].tick;
    }
  };
  (disposable._ObservableTimer.new = function(duration, callback) {
    this[_didConclude] = async.Completer.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Completer<core|Null>", true));
    this[___ObservableTimer__timer] = null;
    this[_timer] = async.Timer.new(duration, dart.fn(() => {
      callback();
      this[_complete$]();
    }, dart_rti._Universe.eval(dart_rti._theUniverse(), "~()", true)));
  }).prototype = disposable._ObservableTimer.prototype;
  (disposable._ObservableTimer.periodic = function(duration, callback) {
    this[_didConclude] = async.Completer.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Completer<core|Null>", true));
    this[___ObservableTimer__timer] = null;
    this[_timer] = async.Timer.periodic(duration, callback);
  }).prototype = disposable._ObservableTimer.prototype;
  dart.addRtiResources(disposable._ObservableTimer, ["w_common__src__common__disposable|_ObservableTimer", "async|Timer"]);
  dart.setMethodSignature(disposable._ObservableTimer, () => dart.global.Object.setPrototypeOf({
    [_complete$]: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "~()", true),
    cancel: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "~()", true)
  }, dart.getMethods(dart.global.Object.getPrototypeOf(disposable._ObservableTimer))));
  dart.setGetterSignature(disposable._ObservableTimer, () => dart.global.Object.setPrototypeOf({
    [_timer]: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Timer", true),
    didConclude: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Future<core|Null>", true),
    isActive: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool", true),
    tick: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|int", true)
  }, dart.getGetters(dart.global.Object.getPrototypeOf(disposable._ObservableTimer))));
  dart.setSetterSignature(disposable._ObservableTimer, () => dart.global.Object.setPrototypeOf({
    [_timer]: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Timer", true)
  }, dart.getSetters(dart.global.Object.getPrototypeOf(disposable._ObservableTimer))));
  dart.setLibraryUri(disposable._ObservableTimer, I[3]);
  dart.setFieldSignature(disposable._ObservableTimer, () => dart.global.Object.setPrototypeOf({
    [_didConclude]: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Completer<core|Null>", true),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    },
    [___ObservableTimer__timer]: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Timer?", true),
      isConst: false,
      isFinal: false,
      libraryUri: I[2]
    }
  }, dart.getFields(dart.global.Object.getPrototypeOf(disposable._ObservableTimer))));
  var description = dart.privateName(disposable, "LeakFlag.description");
  disposable.LeakFlag = class LeakFlag extends core.Object {
    get description() {
      return this[description];
    }
    set description(value) {
      super.description = value;
    }
    static ['_#new#tearOff'](description) {
      return new disposable.LeakFlag.new(description);
    }
    toString() {
      return this.description == null ? "LeakFlag" : "LeakFlag: " + dart.str(this.description);
    }
  };
  (disposable.LeakFlag.new = function(description$) {
    this[description] = description$;
    ;
  }).prototype = disposable.LeakFlag.prototype;
  dart.addRtiResources(disposable.LeakFlag, ["w_common__src__common__disposable|LeakFlag"]);
  dart.setLibraryUri(disposable.LeakFlag, I[3]);
  dart.setFieldSignature(disposable.LeakFlag, () => dart.global.Object.setPrototypeOf({description: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|String?", true),
      isConst: false,
      isFinal: true,
      libraryUri: I[1]
    }}, dart.getFields(dart.global.Object.getPrototypeOf(disposable.LeakFlag))));
  dart.defineExtensionMethods(disposable.LeakFlag, ['toString']);
  var _awaitableFutures = dart.privateName(disposable, "_awaitableFutures");
  var _leakFlag = dart.privateName(disposable, "_leakFlag");
  var _internalDisposables = dart.privateName(disposable, "_internalDisposables");
  var _state = dart.privateName(disposable, "_state");
  var _isDisposedOrDisposing = dart.privateName(disposable, "_isDisposedOrDisposing");
  var _throwOnInvalidCall = dart.privateName(disposable, "_throwOnInvalidCall");
  var _logDispose = dart.privateName(disposable, "_logDispose");
  var _throwOnInvalidCall2 = dart.privateName(disposable, "_throwOnInvalidCall2");
  var _logManageMessage = dart.privateName(disposable, "_logManageMessage");
  var _logUnmanageMessage = dart.privateName(disposable, "_logUnmanageMessage");
  var _addObservableTimerDisposable = dart.privateName(disposable, "_addObservableTimerDisposable");
  disposable.Disposable = class Disposable extends core.Object {
    static disableDebugMode() {
      let t$360;
      if (disposable.Disposable._debugMode) {
        disposable.Disposable._debugMode = false;
        disposable.Disposable._debugModeLogging = false;
        disposable.Disposable._debugModeTelemetry = false;
        t$360 = disposable.Disposable._logger;
        t$360 == null ? null : t$360.clearListeners();
        disposable.Disposable._logger = null;
      }
    }
    static enableDebugMode(opts) {
      let t$360, t$360$;
      let disableLogging = opts && 'disableLogging' in opts ? opts.disableLogging : null;
      let disableTelemetry = opts && 'disableTelemetry' in opts ? opts.disableTelemetry : null;
      if (!disposable.Disposable._debugMode) {
        disposable.Disposable._debugMode = true;
        disposable.Disposable._debugModeLogging = !dart.test((t$360 = disableLogging, t$360 == null ? false : t$360));
        disposable.Disposable._debugModeTelemetry = !dart.test((t$360$ = disableTelemetry, t$360$ == null ? false : t$360$));
        if (disposable.Disposable._debugModeLogging) {
          disposable.Disposable._logger = logger.Logger.new("w_common.Disposable");
        }
      }
    }
    get didDispose() {
      return this[_didDispose].future;
    }
    get disposableTypeName() {
      return "Disposable";
    }
    get disposalTreeSize() {
      let size = 1;
      for (let disposable of this[_internalDisposables]) {
        if (dart_rti._Universe.eval(dart_rti._theUniverse(), "w_common__src__common__disposable|Disposable", true)[_is](disposable)) {
          size = size + disposable.disposalTreeSize;
        } else {
          size = size + 1;
        }
      }
      return size;
    }
    get isDisposed() {
      return this[_didDispose].isCompleted;
    }
    get [_isDisposedOrDisposing]() {
      return this.isDisposed || this[_isDisposing];
    }
    get [_isDisposing]() {
      return this[_state] === disposable_state.DisposableState.disposing;
    }
    get isLeakFlagSet() {
      return this[_leakFlag] != null;
    }
    get isOrWillBeDisposed() {
      return this[_state] === disposable_state.DisposableState.awaitingDisposal || this[_state] === disposable_state.DisposableState.disposing || this[_state] === disposable_state.DisposableState.disposed;
    }
    awaitBeforeDispose(T, future) {
      this[_throwOnInvalidCall]("awaitBeforeDispose", "future", future);
      this[_awaitableFutures].add(future);
      future.then(dart_rti._Universe.eval(dart_rti._theUniverse(), "core|Null", true), dart.fn(_ => {
        if (!this.isOrWillBeDisposed) {
          this[_awaitableFutures].remove(future);
        }
      }, dart_rti.instanceType(this)[_bind](T)[_eval]("core|Null(1)"))).catchError(dart.fn(_ => {
        if (!this.isOrWillBeDisposed) {
          this[_awaitableFutures].remove(future);
        }
      }, dart_rti._Universe.eval(dart_rti._theUniverse(), "core|Null(@)", true)));
      return future;
    }
    dispose() {
      let t$360;
      let t$goto = 0, t$completer = async._makeAsyncAwaitCompleter(dart_rti._Universe.eval(dart_rti._theUniverse(), "core|Null", true)), t$returnValue, t$wrappedValue, t$iterator, asyncScope = Object.create(null), asyncScope$ = Object.create(null), asyncScope$0 = Object.create(null), asyncScope$1 = Object.create(null);
      var t$36asyncdispose = async._wrapJsFunctionForAsync((t$errorCode, t$result) => {
        if (t$errorCode === 1) return async._asyncRethrow(t$result, t$completer);
        while (true)
          switch (t$goto) {
            case 0:
              // Function start
              asyncScope.stopwatch = null;
              if (disposable.Disposable._debugModeTelemetry) asyncScope.stopwatch = (t$360 = new core.Stopwatch.new(), (() => {
                t$360.start();
                return t$360;
              })());
              this[_logDispose]();
              if (this.isDisposed) {
                t$returnValue = null;
                // goto return
                t$goto = 2;
                break;
              }
              if (this.isOrWillBeDisposed) {
                t$returnValue = this.didDispose;
                // goto return
                t$goto = 2;
                break;
              }
              this[_state] = disposable_state.DisposableState.awaitingDisposal;
              t$goto = 3;
              return async._asyncAwait(this.onWillDispose(), t$36asyncdispose, t$completer);
            case 3:
              // returning from await.
            case 4:
              // while condition
              if (!this[_awaitableFutures][$isNotEmpty]) {
                // goto after while
                t$goto = 5;
                break;
              }
              asyncScope$1.futures = this[_awaitableFutures][$toList]();
              this[_awaitableFutures].clear();
              t$goto = 6;
              return async._asyncAwait(async.Future.wait(dart_rti._Universe.eval(dart_rti._theUniverse(), "@", true), asyncScope$1.futures), t$36asyncdispose, t$completer);
            case 6:
              // returning from await.
              // goto while condition
              t$goto = 4;
              break;
            case 5:
              // after while
              this[_state] = disposable_state.DisposableState.disposing;
              t$iterator = this[_internalDisposables][Symbol.iterator]();
            case 7:
              // for-of iterator update
              t$wrappedValue = t$iterator.next();
              if (t$wrappedValue.done) {
                // goto after for-of
                t$goto = 8;
                break;
              }
              asyncScope$0.disposable = t$wrappedValue.value;
              t$goto = 9;
              return async._asyncAwait(asyncScope$0.disposable.dispose(), t$36asyncdispose, t$completer);
            case 9:
              // returning from await.
              // goto for-of iterator update
              t$goto = 7;
              break;
            case 8:
              // after for-of
              this[_internalDisposables].clear();
              t$goto = 10;
              return async._asyncAwait(this.onDispose(), t$36asyncdispose, t$completer);
            case 10:
              // returning from await.
              this[_didDispose].complete();
              this[_state] = disposable_state.DisposableState.disposed;
              if (disposable.Disposable._debugModeLogging) dart.nullCheck(disposable.Disposable._logger).info("Disposed object " + dart.strSafe(dart.hashCode(this)) + " of type " + dart.str(dart.runtimeType(this)));
              if (disposable.Disposable._debugModeTelemetry) {
                dart.nullCheck(asyncScope.stopwatch).stop();
                asyncScope$.t = asyncScope.stopwatch.elapsedMicroseconds / 1000000.0;
                dart.nullCheck(disposable.Disposable._logger).info(dart.str(dart.runtimeType(this)) + " " + dart.strSafe(dart.hashCode(this)) + " took " + dart.strSafe(asyncScope$.t) + " seconds to dispose");
              }
              this.flagLeak();
            case 2:
              // return
              return async._asyncReturn(t$returnValue, t$completer);
          }
      });
      return async._asyncStartSync(t$36asyncdispose, t$completer);
    }
    flagLeak(description = null) {
      let t$360;
      if (disposable.Disposable._debugMode && this[_leakFlag] == null) {
        this[_leakFlag] = new disposable.LeakFlag.new((t$360 = description, t$360 == null ? this.disposableTypeName + " (runtimeType: " + dart.str(dart.runtimeType(this)) + ")" : t$360));
      }
    }
    getManagedDelayedFuture(T, duration, callback) {
      this[_throwOnInvalidCall2]("getManagedDelayedFuture", "duration", "callback", duration, callback);
      let completer = async.Completer.new(dart_rti.instanceType(this)[_bind](T)[_eval]("async|Completer<1>"));
      let timer = new disposable._ObservableTimer.new(duration, dart.fn(() => completer.complete(callback()), dart_rti._Universe.eval(dart_rti._theUniverse(), "~()", true)));
      let disposable$ = new disposable.ManagedDisposer.new(dart.fn(() => {
        let t$goto = 0, t$completer = async._makeAsyncAwaitCompleter(dart_rti._Universe.eval(dart_rti._theUniverse(), "core|Null", true));
        var t$36asyncBody = async._wrapJsFunctionForAsync((t$errorCode, t$result) => {
          if (t$errorCode === 1) return async._asyncRethrow(t$result, t$completer);
          while (true)
            switch (t$goto) {
              case 0:
                // Function start
                timer.cancel();
                completer.completeError(new disposable_manager.ObjectDisposedException.new());
                // implicit return
                return async._asyncReturn(null, t$completer);
            }
        });
        return async._asyncStartSync(t$36asyncBody, t$completer);
      }, dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Future<core|Null>()", true)));
      this[_logManageMessage](completer.future);
      this[_internalDisposables].add(disposable$);
      timer.didConclude.then(dart_rti._Universe.eval(dart_rti._theUniverse(), "core|Null", true), dart.fn(_ => {
        if (!this[_isDisposedOrDisposing]) {
          this[_logUnmanageMessage](completer.future);
          this[_internalDisposables].remove(disposable$);
        }
      }, dart_rti._Universe.eval(dart_rti._theUniverse(), "core|Null(core|Null)", true)));
      return completer.future;
    }
    getManagedDisposer(disposer) {
      this[_throwOnInvalidCall]("getManagedDisposer", "disposer", disposer);
      this[_logManageMessage](disposer);
      let disposable$ = new disposable.ManagedDisposer.new(disposer);
      this[_internalDisposables].add(disposable$);
      disposable$.didDispose.then(dart_rti._Universe.eval(dart_rti._theUniverse(), "core|Null", true), dart.fn(_ => {
        if (!this[_isDisposedOrDisposing]) {
          this[_logUnmanageMessage](disposer);
          this[_internalDisposables].remove(disposable$);
        }
      }, dart_rti._Universe.eval(dart_rti._theUniverse(), "core|Null(core|Object?)", true)));
      return disposable$;
    }
    getManagedTimer(duration, callback) {
      this[_throwOnInvalidCall2]("getManagedTimer", "duration", "callback", duration, callback);
      let timer = new disposable._ObservableTimer.new(duration, callback);
      this[_addObservableTimerDisposable](timer);
      return timer;
    }
    getManagedPeriodicTimer(duration, callback) {
      this[_throwOnInvalidCall2]("getManagedPeriodicTimer", "duration", "callback", duration, callback);
      let timer = new disposable._ObservableTimer.periodic(duration, callback);
      this[_addObservableTimerDisposable](timer);
      return timer;
    }
    listenToStream(T, stream, onData, opts) {
      let onError = opts && 'onError' in opts ? opts.onError : null;
      let onDone = opts && 'onDone' in opts ? opts.onDone : null;
      let cancelOnError = opts && 'cancelOnError' in opts ? opts.cancelOnError : null;
      this[_throwOnInvalidCall2]("listenToStream", "stream", "onData", stream, onData);
      let managedStreamSubscription = new managed_stream_subscription.ManagedStreamSubscription.new(dart_rti.instanceType(this)[_bind](T)[_eval]("w_common__src__common__managed_stream_subscription|ManagedStreamSubscription<1>"), stream, onData, {onError: onError, onDone: onDone, cancelOnError: cancelOnError});
      this[_logManageMessage](managedStreamSubscription);
      let disposable$ = new disposable.ManagedDisposer.new(dart.fn(() => {
        this[_logUnmanageMessage](managedStreamSubscription);
        return managedStreamSubscription.cancel();
      }, dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Future<~>()", true)));
      this[_internalDisposables].add(disposable$);
      managedStreamSubscription.didComplete.then(dart_rti._Universe.eval(dart_rti._theUniverse(), "core|Null", true), dart.fn(_ => {
        if (!this[_isDisposedOrDisposing]) {
          this[_logUnmanageMessage](disposable$);
          this[_internalDisposables].remove(disposable$);
        }
      }, dart_rti._Universe.eval(dart_rti._theUniverse(), "core|Null(core|Object?)", true)));
      return managedStreamSubscription;
    }
    manageAndReturnTypedDisposable(T, disposable) {
      this[_throwOnInvalidCall]("manageAndReturnDisposable", "disposable", disposable);
      this.manageDisposable(disposable);
      return disposable;
    }
    manageCompleter(T, completer) {
      this[_throwOnInvalidCall]("manageCompleter", "completer", completer);
      this[_logManageMessage](completer);
      let disposable$ = new disposable.ManagedDisposer.new(dart.fn(() => {
        let t$goto = 0, t$completer = async._makeAsyncAwaitCompleter(dart_rti._Universe.eval(dart_rti._theUniverse(), "core|Null", true));
        var t$36asyncBody = async._wrapJsFunctionForAsync((t$errorCode, t$result) => {
          if (t$errorCode === 1) return async._asyncRethrow(t$result, t$completer);
          while (true)
            switch (t$goto) {
              case 0:
                // Function start
                if (!completer.isCompleted) completer.completeError(new disposable_manager.ObjectDisposedException.new());
                // implicit return
                return async._asyncReturn(null, t$completer);
            }
        });
        return async._asyncStartSync(t$36asyncBody, t$completer);
      }, dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Future<core|Null>()", true)));
      this[_internalDisposables].add(disposable$);
      completer.future.whenComplete(dart.fn(() => {
        if (!this[_isDisposedOrDisposing]) {
          this[_logUnmanageMessage](completer);
          this[_internalDisposables].remove(disposable$);
        }
      }, dart_rti._Universe.eval(dart_rti._theUniverse(), "core|Null()", true))).then(dart_rti._Universe.eval(dart_rti._theUniverse(), "core|Null", true), dart.fn(value => null, dart_rti.instanceType(this)[_bind](T)[_eval]("core|Null(1)"))).catchError(dart.fn(_ => null, dart_rti._Universe.eval(dart_rti._theUniverse(), "core|Null(@)", true)));
      return completer;
    }
    manageDisposable(disposable) {
      if (disposable === null) {
        return;
      }
      this[_throwOnInvalidCall]("manageDisposable", "disposable", disposable);
      this[_logManageMessage](disposable);
      this[_internalDisposables].add(disposable);
      disposable.didDispose.then(dart_rti._Universe.eval(dart_rti._theUniverse(), "core|Null", true), dart.fn(_ => {
        if (!this[_isDisposedOrDisposing]) {
          this[_logUnmanageMessage](disposable);
          this[_internalDisposables].remove(disposable);
        }
      }, dart_rti._Universe.eval(dart_rti._theUniverse(), "core|Null(core|Object?)", true)));
    }
    manageStreamController(controller) {
      this[_throwOnInvalidCall]("manageStreamController", "controller", controller);
      this[_logManageMessage](controller);
      let isDone = false;
      let disposable$ = new disposable.ManagedDisposer.new(dart.fn(() => {
        if (!controller.hasListener && !controller.isClosed && !isDone) {
          controller.stream.listen(dart.fn(_ => {
          }, dart_rti._Universe.eval(dart_rti._theUniverse(), "~(@)", true)));
        }
        return controller.close();
      }, dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Future<@>()", true)));
      controller.done.then(dart_rti._Universe.eval(dart_rti._theUniverse(), "core|Null", true), dart.fn(_ => {
        isDone = true;
        if (!this[_isDisposedOrDisposing]) {
          this[_logUnmanageMessage](controller);
          this[_internalDisposables].remove(disposable$);
        }
        disposable$.dispose();
      }, dart_rti._Universe.eval(dart_rti._theUniverse(), "core|Null(@)", true)));
      this[_internalDisposables].add(disposable$);
    }
    onDispose() {
      let t$goto = 0, t$completer = async._makeAsyncAwaitCompleter(dart_rti._Universe.eval(dart_rti._theUniverse(), "core|Null", true)), t$returnValue;
      var t$36asynconDispose = async._wrapJsFunctionForAsync((t$errorCode, t$result) => {
        if (t$errorCode === 1) return async._asyncRethrow(t$result, t$completer);
        while (true)
          switch (t$goto) {
            case 0:
              // Function start
              t$returnValue = null;
              // goto return
              t$goto = 2;
              break;
            case 2:
              // return
              return async._asyncReturn(t$returnValue, t$completer);
          }
      });
      return async._asyncStartSync(t$36asynconDispose, t$completer);
    }
    onWillDispose() {
      let t$goto = 0, t$completer = async._makeAsyncAwaitCompleter(dart_rti._Universe.eval(dart_rti._theUniverse(), "core|Null", true)), t$returnValue;
      var t$36asynconWillDispose = async._wrapJsFunctionForAsync((t$errorCode, t$result) => {
        if (t$errorCode === 1) return async._asyncRethrow(t$result, t$completer);
        while (true)
          switch (t$goto) {
            case 0:
              // Function start
              t$returnValue = null;
              // goto return
              t$goto = 2;
              break;
            case 2:
              // return
              return async._asyncReturn(t$returnValue, t$completer);
          }
      });
      return async._asyncStartSync(t$36asynconWillDispose, t$completer);
    }
    [_addObservableTimerDisposable](timer) {
      let disposable$ = new disposable.ManagedDisposer.new(dart.fn(() => {
        let t$goto = 0, t$completer = async._makeAsyncAwaitCompleter(dart_rti._Universe.eval(dart_rti._theUniverse(), "~", true)), t$returnValue;
        var t$36asyncBody = async._wrapJsFunctionForAsync((t$errorCode, t$result) => {
          if (t$errorCode === 1) return async._asyncRethrow(t$result, t$completer);
          while (true)
            switch (t$goto) {
              case 0:
                // Function start
                t$returnValue = timer.cancel();
                // goto return
                t$goto = 2;
                break;
              case 2:
                // return
                return async._asyncReturn(t$returnValue, t$completer);
            }
        });
        return async._asyncStartSync(t$36asyncBody, t$completer);
      }, dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Future<~>()", true)));
      this[_internalDisposables].add(disposable$);
      timer.didConclude.then(dart_rti._Universe.eval(dart_rti._theUniverse(), "core|Null", true), dart.fn(_ => {
        if (!this[_isDisposedOrDisposing]) {
          this[_internalDisposables].remove(disposable$);
        }
      }, dart_rti._Universe.eval(dart_rti._theUniverse(), "core|Null(core|Null)", true)));
    }
    [_logDispose]() {
      if (disposable.Disposable._debugModeLogging) {
        dart.nullCheck(disposable.Disposable._logger).info("Disposing object " + dart.strSafe(dart.hashCode(this)) + " of type " + dart.str(dart.runtimeType(this)));
      }
    }
    [_logUnmanageMessage](target) {
      if (disposable.Disposable._debugModeLogging) {
        dart.nullCheck(disposable.Disposable._logger).info(dart.str(dart.runtimeType(this)) + " " + dart.strSafe(dart.hashCode(this)) + " unmanaging " + dart.str(dart.runtimeType(target)) + " " + dart.strSafe(dart.hashCode(target)));
      }
    }
    [_logManageMessage](target) {
      if (disposable.Disposable._debugModeLogging) {
        dart.nullCheck(disposable.Disposable._logger).info(dart.str(dart.runtimeType(this)) + " " + dart.strSafe(dart.hashCode(this)) + " managing " + dart.str(dart.runtimeType(target)) + " " + dart.strSafe(dart.hashCode(target)));
      }
    }
    [_throwOnInvalidCall](methodName, parameterName, parameterValue) {
      if (parameterValue == null) {
        dart.throw(new core.ArgumentError.notNull(parameterName));
      }
      if (this[_isDisposing]) {
        dart.throw(new core.StateError.new(this.disposableTypeName + "." + methodName + " not allowed, object is disposing"));
      }
      if (this.isDisposed) {
        dart.throw(new core.StateError.new(this.disposableTypeName + "." + methodName + " not allowed, object is already disposed"));
      }
    }
    [_throwOnInvalidCall2](methodName, parameterName, secondParameterName, parameterValue, secondParameterValue) {
      if (secondParameterValue == null) {
        dart.throw(new core.ArgumentError.notNull(secondParameterName));
      }
      this[_throwOnInvalidCall](methodName, parameterName, parameterValue);
    }
    static ['_#new#tearOff']() {
      return new disposable.Disposable.new();
    }
  };
  (disposable.Disposable.new = function() {
    this[_awaitableFutures] = new _js_helper.LinkedSet.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "_js_helper|LinkedSet<async|Future<@>>", true));
    this[_didDispose] = async.Completer.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Completer<core|Null>", true));
    this[_leakFlag] = null;
    this[_internalDisposables] = new _js_helper.LinkedSet.new(dart_rti._Universe.eval(dart_rti._theUniverse(), "_js_helper|LinkedSet<w_common__src__common__disposable|_Disposable>", true));
    this[_state] = disposable_state.DisposableState.initialized;
    ;
  }).prototype = disposable.Disposable.prototype;
  dart.addRtiResources(disposable.Disposable, ["w_common__src__common__disposable|Disposable", "w_common__src__common__disposable|_Disposable", "w_common__src__common__disposable_manager|DisposableManagerV7", "w_common__src__common__disposable_manager|LeakFlagger"]);
  dart.setMethodSignature(disposable.Disposable, () => dart.global.Object.setPrototypeOf({
    awaitBeforeDispose: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Future<0^>(async|Future<0^>)<core|Object?>", true),
    dispose: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Future<core|Null>()", true),
    flagLeak: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "~([core|String?])", true),
    getManagedDelayedFuture: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Future<0^>(core|Duration,0^())<core|Object?>", true),
    getManagedDisposer: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "w_common__src__common__disposable|ManagedDisposer(async|Future<@>?())", true),
    getManagedTimer: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Timer(core|Duration,~())", true),
    getManagedPeriodicTimer: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Timer(core|Duration,~(async|Timer))", true),
    listenToStream: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "async|StreamSubscription<0^>(async|Stream<0^>,~(0^){cancelOnError:core|bool?,onDone:~()?,onError:core|Function?})<core|Object?>", true),
    manageAndReturnTypedDisposable: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "0^(0^)<w_common__src__common__disposable|Disposable>", true),
    manageCompleter: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Completer<0^>(async|Completer<0^>)<core|Object?>", true),
    manageDisposable: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "~(w_common__src__common__disposable|Disposable)", true),
    manageStreamController: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "~(async|StreamController<@>)", true),
    onDispose: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Future<core|Null>()", true),
    onWillDispose: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Future<core|Null>()", true),
    [_addObservableTimerDisposable]: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "~(w_common__src__common__disposable|_ObservableTimer)", true),
    [_logDispose]: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "~()", true),
    [_logUnmanageMessage]: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "~(core|Object?)", true),
    [_logManageMessage]: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "~(core|Object?)", true),
    [_throwOnInvalidCall]: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "~(core|String,core|String,@)", true),
    [_throwOnInvalidCall2]: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "~(core|String,core|String,core|String,@,@)", true)
  }, dart.getMethods(dart.global.Object.getPrototypeOf(disposable.Disposable))));
  dart.setMethodsDefaultTypeArgSignature(disposable.Disposable, () => dart.global.Object.setPrototypeOf({
    awaitBeforeDispose: _ti => [dart_rti._Universe.eval(dart_rti._theUniverse(), "@", true)],
    getManagedDelayedFuture: _ti => [dart_rti._Universe.eval(dart_rti._theUniverse(), "@", true)],
    listenToStream: _ti => [dart_rti._Universe.eval(dart_rti._theUniverse(), "@", true)],
    manageAndReturnTypedDisposable: _ti => [dart_rti._Universe.eval(dart_rti._theUniverse(), "w_common__src__common__disposable|Disposable", true)],
    manageCompleter: _ti => [dart_rti._Universe.eval(dart_rti._theUniverse(), "@", true)]
  }, dart.getMethodsDefaultTypeArgs(dart.global.Object.getPrototypeOf(disposable.Disposable))));
  dart.setStaticMethodSignature(disposable.Disposable, () => ['disableDebugMode', 'enableDebugMode']);
  dart.setGetterSignature(disposable.Disposable, () => dart.global.Object.setPrototypeOf({
    didDispose: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Future<core|Null>", true),
    disposableTypeName: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|String", true),
    disposalTreeSize: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|int", true),
    isDisposed: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool", true),
    [_isDisposedOrDisposing]: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool", true),
    [_isDisposing]: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool", true),
    isLeakFlagSet: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool", true),
    isOrWillBeDisposed: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool", true)
  }, dart.getGetters(dart.global.Object.getPrototypeOf(disposable.Disposable))));
  dart.setLibraryUri(disposable.Disposable, I[3]);
  dart.setFieldSignature(disposable.Disposable, () => dart.global.Object.setPrototypeOf({
    [_awaitableFutures]: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "collection|HashSet<async|Future<@>>", true),
      isConst: false,
      isFinal: true,
      libraryUri: I[5]
    },
    [_didDispose]: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "async|Completer<core|Null>", true),
      isConst: false,
      isFinal: true,
      libraryUri: I[2]
    },
    [_leakFlag]: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "w_common__src__common__disposable|LeakFlag?", true),
      isConst: false,
      isFinal: false,
      libraryUri: I[3]
    },
    [_internalDisposables]: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "collection|HashSet<w_common__src__common__disposable|_Disposable>", true),
      isConst: false,
      isFinal: true,
      libraryUri: I[5]
    },
    [_state]: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "w_common__src__common__disposable_state|DisposableState", true),
      isConst: false,
      isFinal: false,
      libraryUri: I[6]
    }
  }, dart.getFields(dart.global.Object.getPrototypeOf(disposable.Disposable))));
  dart.setStaticFieldSignature(disposable.Disposable, () => ['_debugMode', '_debugModeLogging', '_debugModeTelemetry', '_logger']);
  dart.defineLazy(disposable.Disposable, {
    /*disposable.Disposable._debugMode*/get _debugMode() {
      return false;
    },
    set _debugMode(value) {},
    /*disposable.Disposable._debugModeLogging*/get _debugModeLogging() {
      return false;
    },
    set _debugModeLogging(value) {},
    /*disposable.Disposable._debugModeTelemetry*/get _debugModeTelemetry() {
      return false;
    },
    set _debugModeTelemetry(value) {},
    /*disposable.Disposable._logger*/get _logger() {
      return null;
    },
    set _logger(value) {}
  });
  dart.defineLazy(disposable, {
    /*disposable.defaultDisposableTypeName*/get defaultDisposableTypeName() {
      return "Disposable";
    }
  });
  var _name = dart.privateName(core, "_name");
  var _enumToString = dart.privateName(core, "_enumToString");
  var _Enum__name = dart.privateName(core, "_Enum._name");
  var _Enum_index = dart.privateName(core, "_Enum.index");
  disposable_state.DisposableState = class DisposableState extends core._Enum {
    [_enumToString]() {
      return "DisposableState." + this[_name];
    }
  };
  (disposable_state.DisposableState.new = function(t$36$35index, t$36$35name) {
    dart.global.Object.getPrototypeOf(disposable_state.DisposableState).new.call(this, t$36$35index, t$36$35name);
    ;
  }).prototype = disposable_state.DisposableState.prototype;
  dart.addRtiResources(disposable_state.DisposableState, ["w_common__src__common__disposable_state|DisposableState"]);
  dart.setMethodSignature(disposable_state.DisposableState, () => dart.global.Object.setPrototypeOf({
    [_enumToString]: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|String()", true)
  }, dart.getMethods(dart.global.Object.getPrototypeOf(disposable_state.DisposableState))));
  dart.setLibraryUri(disposable_state.DisposableState, I[6]);
  dart.setStaticFieldSignature(disposable_state.DisposableState, () => ['values', 'initialized', 'awaitingDisposal', 'disposing', 'disposed']);
  dart.defineLazy(disposable_state.DisposableState, {
    /*disposable_state.DisposableState.values*/get values() {
      return C[0] || CT.C0;
    },
    /*disposable_state.DisposableState.initialized*/get initialized() {
      return C[1] || CT.C1;
    },
    /*disposable_state.DisposableState.awaitingDisposal*/get awaitingDisposal() {
      return C[2] || CT.C2;
    },
    /*disposable_state.DisposableState.disposing*/get disposing() {
      return C[3] || CT.C3;
    },
    /*disposable_state.DisposableState.disposed*/get disposed() {
      return C[4] || CT.C4;
    }
  });
  disposable_manager.DisposableManagerV7 = class DisposableManagerV7 extends core.Object {};
  (disposable_manager.DisposableManagerV7.new = function() {
    ;
  }).prototype = disposable_manager.DisposableManagerV7.prototype;
  dart.addRtiResources(disposable_manager.DisposableManagerV7, ["w_common__src__common__disposable_manager|DisposableManagerV7"]);
  dart.setLibraryUri(disposable_manager.DisposableManagerV7, I[7]);
  disposable_manager.LeakFlagger = class LeakFlagger extends core.Object {};
  (disposable_manager.LeakFlagger.new = function() {
    ;
  }).prototype = disposable_manager.LeakFlagger.prototype;
  dart.addRtiResources(disposable_manager.LeakFlagger, ["w_common__src__common__disposable_manager|LeakFlagger"]);
  dart.setLibraryUri(disposable_manager.LeakFlagger, I[7]);
  disposable_manager.ObjectDisposedException = class ObjectDisposedException extends core.Object {
    static ['_#new#tearOff']() {
      return new disposable_manager.ObjectDisposedException.new();
    }
  };
  (disposable_manager.ObjectDisposedException.new = function() {
    ;
  }).prototype = disposable_manager.ObjectDisposedException.prototype;
  dart.addRtiResources(disposable_manager.ObjectDisposedException, ["w_common__src__common__disposable_manager|ObjectDisposedException", "core|Exception"]);
  dart.setLibraryUri(disposable_manager.ObjectDisposedException, I[7]);
  dart.moduleConstCaches.set("packages/w_common/src/common/disposable", C);
  dart_rti._Universe.addRules(dart.typeUniverse, JSON.parse('{"async|Completer":{"Completer.T":"1"},"w_common__src__common__managed_stream_subscription|ManagedStreamSubscription":{"ManagedStreamSubscription.T":"1","StreamSubscription.T":"1","async|StreamSubscription":["1"]},"async|StreamSubscription":{"StreamSubscription.T":"1"},"async|Future":{"Future.T":"1"},"core|int":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|num":{"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|Comparable":{"Comparable.T":"1"},"core|String":{"Comparable.T":"core|String","core|Comparable":["core|String"],"core|Pattern":[]},"_js_helper|LinkedSet":{"LinkedSet.E":"1","InternalSet.E":"1","_js_helper|InternalSet":["1"],"SetBase.E":"1","collection|SetBase":["1"],"LinkedHashSet.E":"1","collection|LinkedHashSet":["1"],"HashSet.E":"1","collection|HashSet":["1"],"Set.E":"1","core|Set":["1"],"Iterable.E":"1","core|Iterable":["1"],"_SetIterable.E":"1","core|_SetIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"_js_helper|InternalSet":{"InternalSet.E":"1","SetBase.E":"1","collection|SetBase":["1"],"LinkedHashSet.E":"1","collection|LinkedHashSet":["1"],"HashSet.E":"1","collection|HashSet":["1"],"Set.E":"1","core|Set":["1"],"Iterable.E":"1","core|Iterable":["1"],"_SetIterable.E":"1","core|_SetIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"collection|SetBase":{"SetBase.E":"1","Set.E":"1","core|Set":["1"],"Iterable.E":"1","core|Iterable":["1"],"_SetIterable.E":"1","core|_SetIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"collection|LinkedHashSet":{"LinkedHashSet.E":"1","Set.E":"1","core|Set":["1"],"Iterable.E":"1","core|Iterable":["1"],"_SetIterable.E":"1","core|_SetIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"collection|HashSet":{"HashSet.E":"1","Set.E":"1","core|Set":["1"],"Iterable.E":"1","core|Iterable":["1"],"_SetIterable.E":"1","core|_SetIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"core|Set":{"Set.E":"1","Iterable.E":"1","core|Iterable":["1"],"_SetIterable.E":"1","core|_SetIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"core|Iterable":{"Iterable.E":"1"},"core|_SetIterable":{"_SetIterable.E":"1","EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"],"Iterable.E":"1","core|Iterable":["1"]},"_internal|EfficientLengthIterable":{"EfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"_internal|HideEfficientLengthIterable":{"HideEfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"w_common__src__common__disposable|Disposable":{"w_common__src__common__disposable|_Disposable":[],"w_common__src__common__disposable_manager|DisposableManagerV7":[],"w_common__src__common__disposable_manager|LeakFlagger":[]},"core|Duration":{"Comparable.T":"core|Duration","core|Comparable":["core|Duration"]},"w_common__src__common__disposable|ManagedDisposer":{"w_common__src__common__disposable|_Disposable":[]},"async|Stream":{"Stream.T":"1"},"async|StreamController":{"StreamController.T":"1","StreamSink.S":"1","async|StreamSink":["1"],"EventSink.T":"1","async|EventSink":["1"],"StreamConsumer.S":"1","async|StreamConsumer":["1"],"Sink.T":"1","core|Sink":["1"]},"async|StreamSink":{"StreamSink.S":"1","EventSink.T":"1","async|EventSink":["1"],"StreamConsumer.S":"1","async|StreamConsumer":["1"],"Sink.T":"1","core|Sink":["1"]},"async|EventSink":{"EventSink.T":"1","Sink.T":"1","core|Sink":["1"]},"async|StreamConsumer":{"StreamConsumer.S":"1"},"core|Sink":{"Sink.T":"1"},"w_common__src__common__disposable|_ObservableTimer":{"async|Timer":[]},"w_common__src__common__disposable_state|DisposableState":{"core|_Enum":[],"core|Enum":[]},"core|_Enum":{"core|Enum":[]},"core|List":{"List.E":"1","Iterable.E":"1","core|Iterable":["1"],"_ListIterable.E":"1","core|_ListIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"core|_ListIterable":{"_ListIterable.E":"1","EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"],"Iterable.E":"1","core|Iterable":["1"]},"w_common__src__common__disposable_manager|ObjectDisposedException":{"core|Exception":[]}}'));
  dart.trackLibraries("packages/w_common/src/common/disposable", {
    "package:w_common/src/common/managed_stream_subscription.dart": managed_stream_subscription,
    "package:w_common/src/common/disposable.dart": disposable,
    "package:w_common/src/common/disposable_state.dart": disposable_state,
    "package:w_common/src/common/disposable_manager.dart": disposable_manager
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["managed_stream_subscription.dart","disposable.dart","disposable_state.dart","disposable_manager.dart"],"names":[],"mappings":"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","file":"disposable.ddc.js"}');
  // Exports:
  return {
    src__common__managed_stream_subscription: managed_stream_subscription,
    src__common__disposable: disposable,
    src__common__disposable_state: disposable_state,
    src__common__disposable_manager: disposable_manager
  };
}));

//# sourceMappingURL=disposable.ddc.js.map
