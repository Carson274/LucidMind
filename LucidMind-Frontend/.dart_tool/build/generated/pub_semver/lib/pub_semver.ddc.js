// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 3.7.2 (stable) (Tue Mar 11 04:27:50 2025 -0700) on "macos_arm64"
// Module: packages/pub_semver/pub_semver
// Flags: soundNullSafety(true), enableAsserts(true)
define(['dart_sdk', 'packages/collection/src/comparators'], (function load__packages__pub_semver__pub_semver(dart_sdk, packages__collection__src__comparators) {
  'use strict';
  const dart_rti = dart_sdk.dart_rti;
  const core = dart_sdk.core;
  const _interceptors = dart_sdk._interceptors;
  const math = dart_sdk.math;
  const _js_helper = dart_sdk._js_helper;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const equality = packages__collection__src__comparators.src__equality;
  var version_union = Object.create(dart.library);
  var version_range = Object.create(dart.library);
  var version_constraint = Object.create(dart.library);
  var version = Object.create(dart.library);
  var patterns = Object.create(dart.library);
  var utils = Object.create(dart.library);
  var pub_semver = Object.create(dart.library);
  var $any = dartx.any;
  var $iterator = dartx.iterator;
  var $add = dartx.add;
  var $isEmpty = dartx.isEmpty;
  var $length = dartx.length;
  var $single = dartx.single;
  var $first = dartx.first;
  var $last = dartx.last;
  var $join = dartx.join;
  var $hashCode = dartx.hashCode;
  var $every = dartx.every;
  var $compareTo = dartx.compareTo;
  var $trim = dartx.trim;
  var $substring = dartx.substring;
  var $startsWith = dartx.startsWith;
  var $isNotEmpty = dartx.isNotEmpty;
  var $expand = dartx.expand;
  var $toList = dartx.toList;
  var $sort = dartx.sort;
  var $_set = dartx._set;
  var $skip = dartx.skip;
  var $split = dartx.split;
  var $map = dartx.map;
  var $_get = dartx._get;
  dart._checkModuleNullSafetyMode(true);
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C1() {
      return C[1] = dart.const(Object.setPrototypeOf({
        $ti: dart_rti._Universe.eval(dart_rti._theUniverse(), "collection__src__equality|DefaultEquality<0&>", true)
      }, equality.DefaultEquality.prototype));
    },
    get C0() {
      return C[0] = dart.const(Object.setPrototypeOf({
        $ti: dart_rti._Universe.eval(dart_rti._theUniverse(), "collection__src__equality|ListEquality<pub_semver__src__version_range|VersionRange>", true),
        [ListEquality__elementEquality]: C[1] || CT.C1
      }, equality.ListEquality.prototype));
    },
    get C2() {
      return C[2] = dart.const(Object.setPrototypeOf({
        [FormatException_offset]: null,
        [FormatException_source]: null,
        [FormatException_message]: "Cannot parse an empty string."
      }, core.FormatException.prototype));
    },
    get C3() {
      return C[3] = dart.const(Object.setPrototypeOf({
      }, version_constraint._EmptyVersion.prototype));
    },
    get C4() {
      return C[4] = dart.const(new _js_helper.PrivateSymbol.new('_compareMax', _compareMax$));
    },
    get C5() {
      return C[5] = dart.const(Object.setPrototypeOf({
        $ti: dart_rti._Universe.eval(dart_rti._theUniverse(), "collection__src__equality|IterableEquality<core|Object>", true),
        [IterableEquality__elementEquality]: C[1] || CT.C1
      }, equality.IterableEquality.prototype));
    }
  });
  var C = Array(6).fill(void 0);
  var I = [
    "org-dartlang-app:///packages/pub_semver/src/version_union.dart",
    "package:pub_semver/src/version_union.dart",
    "dart:core",
    "org-dartlang-app:///packages/pub_semver/src/version_range.dart",
    "package:pub_semver/src/version_range.dart",
    "package:pub_semver/src/version.dart",
    "package:pub_semver/src/version_constraint.dart"
  ];
  var ranges = dart.privateName(version_union, "VersionUnion.ranges");
  var _rangesFor = dart.privateName(version_union, "_rangesFor");
  var _as = dart.privateName(dart_rti, "_as");
  var _is = dart.privateName(dart_rti, "_is");
  var ListEquality__elementEquality = dart.privateName(equality, "ListEquality._elementEquality");
  version_union.VersionUnion = class VersionUnion extends core.Object {
    get ranges() {
      return this[ranges];
    }
    set ranges(value) {
      super.ranges = value;
    }
    get isEmpty() {
      return false;
    }
    get isAny() {
      return false;
    }
    static ['_#fromRanges#tearOff'](ranges) {
      return new version_union.VersionUnion.fromRanges(ranges);
    }
    allows(version) {
      return this.ranges[$any](dart.fn(constraint => constraint.allows(version), dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool(pub_semver__src__version_range|VersionRange)", true)));
    }
    allowsAll(other) {
      let ourRanges = this.ranges[$iterator];
      let theirRanges = this[_rangesFor](other)[$iterator];
      let ourRangesMoved = ourRanges.moveNext();
      let theirRangesMoved = theirRanges.moveNext();
      while (ourRangesMoved && theirRangesMoved) {
        if (ourRanges.current.allowsAll(theirRanges.current)) {
          theirRangesMoved = theirRanges.moveNext();
        } else {
          ourRangesMoved = ourRanges.moveNext();
        }
      }
      return !theirRangesMoved;
    }
    allowsAny(other) {
      let ourRanges = this.ranges[$iterator];
      let theirRanges = this[_rangesFor](other)[$iterator];
      let ourRangesMoved = ourRanges.moveNext();
      let theirRangesMoved = theirRanges.moveNext();
      while (ourRangesMoved && theirRangesMoved) {
        if (ourRanges.current.allowsAny(theirRanges.current)) {
          return true;
        }
        if (utils.allowsHigher(theirRanges.current, ourRanges.current)) {
          ourRangesMoved = ourRanges.moveNext();
        } else {
          theirRangesMoved = theirRanges.moveNext();
        }
      }
      return false;
    }
    intersect(other) {
      let ourRanges = this.ranges[$iterator];
      let theirRanges = this[_rangesFor](other)[$iterator];
      let newRanges = _interceptors.JSArray.of(dart_rti._Universe.eval(dart_rti._theUniverse(), "_interceptors|JSArray<pub_semver__src__version_range|VersionRange>", true), []);
      let ourRangesMoved = ourRanges.moveNext();
      let theirRangesMoved = theirRanges.moveNext();
      while (ourRangesMoved && theirRangesMoved) {
        let intersection = ourRanges.current.intersect(theirRanges.current);
        if (!intersection.isEmpty) newRanges[$add](dart_rti._Universe.eval(dart_rti._theUniverse(), "pub_semver__src__version_range|VersionRange", true)[_as](intersection));
        if (utils.allowsHigher(theirRanges.current, ourRanges.current)) {
          ourRangesMoved = ourRanges.moveNext();
        } else {
          theirRangesMoved = theirRanges.moveNext();
        }
      }
      if (newRanges[$isEmpty]) return version_constraint.VersionConstraint.empty;
      if (newRanges[$length] === 1) return newRanges[$single];
      return new version_union.VersionUnion.fromRanges(newRanges);
    }
    difference(other) {
      let ourRanges = this.ranges[$iterator];
      let theirRanges = this[_rangesFor](other)[$iterator];
      let newRanges = _interceptors.JSArray.of(dart_rti._Universe.eval(dart_rti._theUniverse(), "_interceptors|JSArray<pub_semver__src__version_range|VersionRange>", true), []);
      ourRanges.moveNext();
      theirRanges.moveNext();
      let current = ourRanges.current;
      function theirNextRange() {
        if (theirRanges.moveNext()) return true;
        newRanges[$add](current);
        while (ourRanges.moveNext()) {
          newRanges[$add](ourRanges.current);
        }
        return false;
      }
      dart.fn(theirNextRange, dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool()", true));
      function ourNextRange(opts) {
        let includeCurrent = opts && 'includeCurrent' in opts ? opts.includeCurrent : true;
        if (includeCurrent) newRanges[$add](current);
        if (!ourRanges.moveNext()) return false;
        current = ourRanges.current;
        return true;
      }
      dart.fn(ourNextRange, dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool({includeCurrent:core|bool})", true));
      for (;;) {
        if (utils.strictlyLower(theirRanges.current, current)) {
          if (!theirNextRange()) break;
          continue;
        }
        if (utils.strictlyHigher(theirRanges.current, current)) {
          if (!ourNextRange()) break;
          continue;
        }
        let difference = current.difference(theirRanges.current);
        if (dart_rti._Universe.eval(dart_rti._theUniverse(), "pub_semver__src__version_union|VersionUnion", true)[_is](difference)) {
          if (!(difference.ranges[$length] === 2)) dart.assertFailed(null, I[0], 173, 16, "difference.ranges.length == 2");
          newRanges[$add](difference.ranges[$first]);
          current = difference.ranges[$last];
          if (!theirNextRange()) break;
        } else if (difference.isEmpty) {
          if (!ourNextRange({includeCurrent: false})) break;
        } else {
          current = dart_rti._Universe.eval(dart_rti._theUniverse(), "pub_semver__src__version_range|VersionRange", true)[_as](difference);
          if (utils.allowsHigher(current, theirRanges.current)) {
            if (!theirNextRange()) break;
          } else {
            if (!ourNextRange()) break;
          }
        }
      }
      if (newRanges[$isEmpty]) return version_constraint.VersionConstraint.empty;
      if (newRanges[$length] === 1) return newRanges[$single];
      return new version_union.VersionUnion.fromRanges(newRanges);
    }
    [_rangesFor](constraint) {
      if (constraint.isEmpty) return _interceptors.JSArray.of(dart_rti._Universe.eval(dart_rti._theUniverse(), "_interceptors|JSArray<pub_semver__src__version_range|VersionRange>", true), []);
      if (dart_rti._Universe.eval(dart_rti._theUniverse(), "pub_semver__src__version_union|VersionUnion", true)[_is](constraint)) return constraint.ranges;
      if (dart_rti._Universe.eval(dart_rti._theUniverse(), "pub_semver__src__version_range|VersionRange", true)[_is](constraint)) return _interceptors.JSArray.of(dart_rti._Universe.eval(dart_rti._theUniverse(), "_interceptors|JSArray<pub_semver__src__version_range|VersionRange>", true), [constraint]);
      dart.throw(new core.ArgumentError.new("Unknown VersionConstraint type " + dart.str(constraint) + "."));
    }
    union(other) {
      return version_constraint.VersionConstraint.unionOf(_interceptors.JSArray.of(dart_rti._Universe.eval(dart_rti._theUniverse(), "_interceptors|JSArray<pub_semver__src__version_constraint|VersionConstraint>", true), [this, other]));
    }
    _equals(other) {
      if (other == null) return false;
      return dart_rti._Universe.eval(dart_rti._theUniverse(), "pub_semver__src__version_union|VersionUnion", true)[_is](other) && (C[0] || CT.C0).equals(this.ranges, other.ranges);
    }
    get hashCode() {
      return (C[0] || CT.C0).hash(this.ranges);
    }
    toString() {
      return this.ranges[$join](" or ");
    }
  };
  (version_union.VersionUnion.fromRanges = function(ranges$) {
    this[ranges] = ranges$;
    ;
  }).prototype = version_union.VersionUnion.prototype;
  dart.addRtiResources(version_union.VersionUnion, ["pub_semver__src__version_union|VersionUnion", "pub_semver__src__version_constraint|VersionConstraint"]);
  dart.setMethodSignature(version_union.VersionUnion, () => dart.global.Object.setPrototypeOf({
    allows: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool(pub_semver__src__version|Version)", true),
    allowsAll: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool(pub_semver__src__version_constraint|VersionConstraint)", true),
    allowsAny: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool(pub_semver__src__version_constraint|VersionConstraint)", true),
    intersect: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "pub_semver__src__version_constraint|VersionConstraint(pub_semver__src__version_constraint|VersionConstraint)", true),
    difference: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "pub_semver__src__version_constraint|VersionConstraint(pub_semver__src__version_constraint|VersionConstraint)", true),
    [_rangesFor]: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|List<pub_semver__src__version_range|VersionRange>(pub_semver__src__version_constraint|VersionConstraint)", true),
    union: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "pub_semver__src__version_constraint|VersionConstraint(pub_semver__src__version_constraint|VersionConstraint)", true)
  }, dart.getMethods(dart.global.Object.getPrototypeOf(version_union.VersionUnion))));
  dart.setGetterSignature(version_union.VersionUnion, () => dart.global.Object.setPrototypeOf({
    isEmpty: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool", true),
    isAny: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool", true)
  }, dart.getGetters(dart.global.Object.getPrototypeOf(version_union.VersionUnion))));
  dart.setLibraryUri(version_union.VersionUnion, I[1]);
  dart.setFieldSignature(version_union.VersionUnion, () => dart.global.Object.setPrototypeOf({ranges: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|List<pub_semver__src__version_range|VersionRange>", true),
      isConst: false,
      isFinal: true,
      libraryUri: I[2]
    }}, dart.getFields(dart.global.Object.getPrototypeOf(version_union.VersionUnion))));
  dart.defineExtensionMethods(version_union.VersionUnion, ['_equals', 'toString']);
  dart.defineExtensionAccessors(version_union.VersionUnion, ['hashCode']);
  var min = dart.privateName(version_range, "VersionRange.min");
  var max = dart.privateName(version_range, "VersionRange.max");
  var includeMin = dart.privateName(version_range, "VersionRange.includeMin");
  var includeMax = dart.privateName(version_range, "VersionRange.includeMax");
  var _compareMax = dart.privateName(version_range, "_compareMax");
  version_range.VersionRange = class VersionRange extends core.Object {
    get min() {
      return this[min];
    }
    set min(value) {
      super.min = value;
    }
    get max() {
      return this[max];
    }
    set max(value) {
      super.max = value;
    }
    get includeMin() {
      return this[includeMin];
    }
    set includeMin(value) {
      super.includeMin = value;
    }
    get includeMax() {
      return this[includeMax];
    }
    set includeMax(value) {
      super.includeMax = value;
    }
    static new(opts) {
      let min = opts && 'min' in opts ? opts.min : null;
      let max = opts && 'max' in opts ? opts.max : null;
      let includeMin = opts && 'includeMin' in opts ? opts.includeMin : false;
      let includeMax = opts && 'includeMax' in opts ? opts.includeMax : false;
      let alwaysIncludeMaxPreRelease = opts && 'alwaysIncludeMaxPreRelease' in opts ? opts.alwaysIncludeMaxPreRelease : false;
      if (min != null && max != null && min['>'](max)) {
        dart.throw(new core.ArgumentError.new("Minimum version (\"" + dart.str(min) + "\") must be less than maximum (\"" + dart.str(max) + "\")."));
      }
      if (!alwaysIncludeMaxPreRelease && !includeMax && max != null && !max.isPreRelease && max.build[$isEmpty] && (min == null || !min.isPreRelease || !utils.equalsWithoutPreRelease(min, max))) {
        max = max.firstPreRelease;
      }
      return new version_range.VersionRange.__(min, max, includeMin, includeMax);
    }
    static ['_#new#tearOff'](opts) {
      let min = opts && 'min' in opts ? opts.min : null;
      let max = opts && 'max' in opts ? opts.max : null;
      let includeMin = opts && 'includeMin' in opts ? opts.includeMin : false;
      let includeMax = opts && 'includeMax' in opts ? opts.includeMax : false;
      let alwaysIncludeMaxPreRelease = opts && 'alwaysIncludeMaxPreRelease' in opts ? opts.alwaysIncludeMaxPreRelease : false;
      return version_range.VersionRange.new({min: min, max: max, includeMin: includeMin, includeMax: includeMax, alwaysIncludeMaxPreRelease: alwaysIncludeMaxPreRelease});
    }
    static ['_#_#tearOff'](min, max, includeMin, includeMax) {
      return new version_range.VersionRange.__(min, max, includeMin, includeMax);
    }
    _equals(other) {
      if (other == null) return false;
      if (!dart_rti._Universe.eval(dart_rti._theUniverse(), "pub_semver__src__version_range|VersionRange", true)[_is](other)) return false;
      return dart.equals(this.min, other.min) && dart.equals(this.max, other.max) && this.includeMin === other.includeMin && this.includeMax === other.includeMax;
    }
    get hashCode() {
      return (dart.hashCode(this.min) ^ dart.hashCode(this.max) * 3 ^ this.includeMin[$hashCode] * 5 ^ this.includeMax[$hashCode] * 7) >>> 0;
    }
    get isEmpty() {
      return false;
    }
    get isAny() {
      return this.min == null && this.max == null;
    }
    allows(other) {
      if (this.min != null) {
        if (other['<'](dart.nullCheck(this.min))) return false;
        if (!this.includeMin && dart.equals(other, this.min)) return false;
      }
      if (this.max != null) {
        if (other['>'](dart.nullCheck(this.max))) return false;
        if (!this.includeMax && dart.equals(other, this.max)) return false;
      }
      return true;
    }
    allowsAll(other) {
      if (other.isEmpty) return true;
      if (dart_rti._Universe.eval(dart_rti._theUniverse(), "pub_semver__src__version|Version", true)[_is](other)) return this.allows(other);
      if (dart_rti._Universe.eval(dart_rti._theUniverse(), "pub_semver__src__version_union|VersionUnion", true)[_is](other)) {
        return other.ranges[$every](dart.bind(this, 'allowsAll'));
      }
      if (dart_rti._Universe.eval(dart_rti._theUniverse(), "pub_semver__src__version_range|VersionRange", true)[_is](other)) {
        return !utils.allowsLower(other, this) && !utils.allowsHigher(other, this);
      }
      dart.throw(new core.ArgumentError.new("Unknown VersionConstraint type " + dart.str(other) + "."));
    }
    allowsAny(other) {
      if (other.isEmpty) return false;
      if (dart_rti._Universe.eval(dart_rti._theUniverse(), "pub_semver__src__version|Version", true)[_is](other)) return this.allows(other);
      if (dart_rti._Universe.eval(dart_rti._theUniverse(), "pub_semver__src__version_union|VersionUnion", true)[_is](other)) {
        return other.ranges[$any](dart.bind(this, 'allowsAny'));
      }
      if (dart_rti._Universe.eval(dart_rti._theUniverse(), "pub_semver__src__version_range|VersionRange", true)[_is](other)) {
        return !utils.strictlyLower(other, this) && !utils.strictlyHigher(other, this);
      }
      dart.throw(new core.ArgumentError.new("Unknown VersionConstraint type " + dart.str(other) + "."));
    }
    intersect(other) {
      if (other.isEmpty) return other;
      if (dart_rti._Universe.eval(dart_rti._theUniverse(), "pub_semver__src__version_union|VersionUnion", true)[_is](other)) return other.intersect(this);
      if (dart_rti._Universe.eval(dart_rti._theUniverse(), "pub_semver__src__version|Version", true)[_is](other)) {
        return this.allows(other) ? other : version_constraint.VersionConstraint.empty;
      }
      if (dart_rti._Universe.eval(dart_rti._theUniverse(), "pub_semver__src__version_range|VersionRange", true)[_is](other)) {
        let intersectMin = null;
        let intersectIncludeMin = null;
        if (utils.allowsLower(this, other)) {
          if (utils.strictlyLower(this, other)) return version_constraint.VersionConstraint.empty;
          intersectMin = other.min;
          intersectIncludeMin = other.includeMin;
        } else {
          if (utils.strictlyLower(other, this)) return version_constraint.VersionConstraint.empty;
          intersectMin = this.min;
          intersectIncludeMin = this.includeMin;
        }
        let intersectMax = null;
        let intersectIncludeMax = null;
        if (utils.allowsHigher(this, other)) {
          intersectMax = other.max;
          intersectIncludeMax = other.includeMax;
        } else {
          intersectMax = this.max;
          intersectIncludeMax = this.includeMax;
        }
        if (intersectMin == null && intersectMax == null) {
          return version_range.VersionRange.new();
        }
        if (dart.equals(intersectMin, intersectMax)) {
          if (!(intersectIncludeMin && intersectIncludeMax)) dart.assertFailed(null, I[3], 201, 16, "intersectIncludeMin && intersectIncludeMax");
          return dart.nullCheck(intersectMin);
        }
        return version_range.VersionRange.new({min: intersectMin, max: intersectMax, includeMin: intersectIncludeMin, includeMax: intersectIncludeMax, alwaysIncludeMaxPreRelease: true});
      }
      dart.throw(new core.ArgumentError.new("Unknown VersionConstraint type " + dart.str(other) + "."));
    }
    union(other) {
      if (dart_rti._Universe.eval(dart_rti._theUniverse(), "pub_semver__src__version|Version", true)[_is](other)) {
        if (this.allows(other)) return this;
        if (dart.equals(other, this.min)) {
          return version_range.VersionRange.new({min: this.min, max: this.max, includeMin: true, includeMax: this.includeMax, alwaysIncludeMaxPreRelease: true});
        }
        if (dart.equals(other, this.max)) {
          return version_range.VersionRange.new({min: this.min, max: this.max, includeMin: this.includeMin, includeMax: true, alwaysIncludeMaxPreRelease: true});
        }
        return version_constraint.VersionConstraint.unionOf(_interceptors.JSArray.of(dart_rti._Universe.eval(dart_rti._theUniverse(), "_interceptors|JSArray<pub_semver__src__version_constraint|VersionConstraint>", true), [this, other]));
      }
      if (dart_rti._Universe.eval(dart_rti._theUniverse(), "pub_semver__src__version_range|VersionRange", true)[_is](other)) {
        let edgesTouch = this.max != null && dart.equals(this.max, other.min) && (this.includeMax || other.includeMin) || this.min != null && dart.equals(this.min, other.max) && (this.includeMin || other.includeMax);
        if (!edgesTouch && !this.allowsAny(other)) {
          return version_constraint.VersionConstraint.unionOf(_interceptors.JSArray.of(dart_rti._Universe.eval(dart_rti._theUniverse(), "_interceptors|JSArray<pub_semver__src__version_constraint|VersionConstraint>", true), [this, other]));
        }
        let unionMin = null;
        let unionIncludeMin = null;
        if (utils.allowsLower(this, other)) {
          unionMin = this.min;
          unionIncludeMin = this.includeMin;
        } else {
          unionMin = other.min;
          unionIncludeMin = other.includeMin;
        }
        let unionMax = null;
        let unionIncludeMax = null;
        if (utils.allowsHigher(this, other)) {
          unionMax = this.max;
          unionIncludeMax = this.includeMax;
        } else {
          unionMax = other.max;
          unionIncludeMax = other.includeMax;
        }
        return version_range.VersionRange.new({min: unionMin, max: unionMax, includeMin: unionIncludeMin, includeMax: unionIncludeMax, alwaysIncludeMaxPreRelease: true});
      }
      return version_constraint.VersionConstraint.unionOf(_interceptors.JSArray.of(dart_rti._Universe.eval(dart_rti._theUniverse(), "_interceptors|JSArray<pub_semver__src__version_constraint|VersionConstraint>", true), [this, other]));
    }
    difference(other) {
      let t$360;
      if (other.isEmpty) return this;
      if (dart_rti._Universe.eval(dart_rti._theUniverse(), "pub_semver__src__version|Version", true)[_is](other)) {
        if (!this.allows(other)) return this;
        if (dart.equals(other, this.min)) {
          if (!this.includeMin) return this;
          return version_range.VersionRange.new({min: this.min, max: this.max, includeMax: this.includeMax, alwaysIncludeMaxPreRelease: true});
        }
        if (dart.equals(other, this.max)) {
          if (!this.includeMax) return this;
          return version_range.VersionRange.new({min: this.min, max: this.max, includeMin: this.includeMin, alwaysIncludeMaxPreRelease: true});
        }
        return new version_union.VersionUnion.fromRanges(_interceptors.JSArray.of(dart_rti._Universe.eval(dart_rti._theUniverse(), "_interceptors|JSArray<pub_semver__src__version_range|VersionRange>", true), [version_range.VersionRange.new({min: this.min, max: other, includeMin: this.includeMin, alwaysIncludeMaxPreRelease: true}), version_range.VersionRange.new({min: other, max: this.max, includeMax: this.includeMax, alwaysIncludeMaxPreRelease: true})]));
      } else if (dart_rti._Universe.eval(dart_rti._theUniverse(), "pub_semver__src__version_range|VersionRange", true)[_is](other)) {
        if (!this.allowsAny(other)) return this;
        let before = null;
        if (!utils.allowsLower(this, other)) {
          before = null;
        } else if (dart.equals(this.min, other.min)) {
          if (!(this.includeMin && !other.includeMin)) dart.assertFailed(null, I[3], 329, 16, "includeMin && !other.includeMin");
          if (!(this.min != null)) dart.assertFailed(null, I[3], 330, 16, "min != null");
          before = this.min;
        } else {
          before = version_range.VersionRange.new({min: this.min, max: other.min, includeMin: this.includeMin, includeMax: !other.includeMin, alwaysIncludeMaxPreRelease: true});
        }
        let after = null;
        if (!utils.allowsHigher(this, other)) {
          after = null;
        } else if (dart.equals(this.max, other.max)) {
          if (!(this.includeMax && !other.includeMax)) dart.assertFailed(null, I[3], 345, 16, "includeMax && !other.includeMax");
          if (!(this.max != null)) dart.assertFailed(null, I[3], 346, 16, "max != null");
          after = this.max;
        } else {
          after = version_range.VersionRange.new({min: other.max, max: this.max, includeMin: !other.includeMax, includeMax: this.includeMax, alwaysIncludeMaxPreRelease: true});
        }
        if (before == null && after == null) return version_constraint.VersionConstraint.empty;
        if (before == null) return dart.nullCheck(after);
        if (after == null) return before;
        return new version_union.VersionUnion.fromRanges(_interceptors.JSArray.of(dart_rti._Universe.eval(dart_rti._theUniverse(), "_interceptors|JSArray<pub_semver__src__version_range|VersionRange>", true), [before, after]));
      } else if (dart_rti._Universe.eval(dart_rti._theUniverse(), "pub_semver__src__version_union|VersionUnion", true)[_is](other)) {
        let ranges = _interceptors.JSArray.of(dart_rti._Universe.eval(dart_rti._theUniverse(), "_interceptors|JSArray<pub_semver__src__version_range|VersionRange>", true), []);
        let current = this;
        for (let range of other.ranges) {
          if (utils.strictlyLower(range, current)) continue;
          if (utils.strictlyHigher(range, current)) break;
          let difference = current.difference(range);
          if (difference.isEmpty) {
            return version_constraint.VersionConstraint.empty;
          } else if (dart_rti._Universe.eval(dart_rti._theUniverse(), "pub_semver__src__version_union|VersionUnion", true)[_is](difference)) {
            if (!(difference.ranges[$length] === 2)) dart.assertFailed(null, I[3], 379, 18, "difference.ranges.length == 2");
            ranges[$add](difference.ranges[$first]);
            current = difference.ranges[$last];
          } else {
            current = dart_rti._Universe.eval(dart_rti._theUniverse(), "pub_semver__src__version_range|VersionRange", true)[_as](difference);
          }
        }
        if (ranges[$isEmpty]) return current;
        return new version_union.VersionUnion.fromRanges((t$360 = ranges, (() => {
          t$360[$add](current);
          return t$360;
        })()));
      }
      dart.throw(new core.ArgumentError.new("Unknown VersionConstraint type " + dart.str(other) + "."));
    }
    compareTo(other) {
      dart_rti._Universe.eval(dart_rti._theUniverse(), "pub_semver__src__version_range|VersionRange", true)[_as](other);
      if (this.min == null) {
        if (other.min == null) return this[_compareMax](other);
        return -1;
      } else if (other.min == null) {
        return 1;
      }
      let result = dart.nullCheck(this.min).compareTo(dart.nullCheck(other.min));
      if (result !== 0) return result;
      if (this.includeMin !== other.includeMin) return this.includeMin ? -1 : 1;
      return this[_compareMax](other);
    }
    [_compareMax](other) {
      if (this.max == null) {
        if (other.max == null) return 0;
        return 1;
      } else if (other.max == null) {
        return -1;
      }
      let result = dart.nullCheck(this.max).compareTo(dart.nullCheck(other.max));
      if (result !== 0) return result;
      if (this.includeMax !== other.includeMax) return this.includeMax ? 1 : -1;
      return 0;
    }
    toString() {
      let t$360, t$360$;
      let buffer = new core.StringBuffer.new();
      let min = this.min;
      if (min != null) {
        t$360 = buffer;
        (() => {
          t$360.write(this.includeMin ? ">=" : ">");
          t$360.write(min);
          return t$360;
        })();
      }
      let max = this.max;
      if (max != null) {
        if (min != null) buffer.write(" ");
        if (this.includeMax) {
          t$360$ = buffer;
          (() => {
            t$360$.write("<=");
            t$360$.write(max);
            return t$360$;
          })();
        } else {
          buffer.write("<");
          if (max.isFirstPreRelease) {
            buffer.write(dart.strSafe(max.major) + "." + dart.strSafe(max.minor) + "." + dart.strSafe(max.patch));
          } else {
            buffer.write(max);
            let minIsPreReleaseOfMax = min != null && min.isPreRelease && utils.equalsWithoutPreRelease(min, max);
            if (!max.isPreRelease && max.build[$isEmpty] && !minIsPreReleaseOfMax) {
              buffer.write("-∞");
            }
          }
        }
      }
      if (min == null && max == null) buffer.write("any");
      return dart.toString(buffer);
    }
  };
  (version_range.VersionRange.__ = function(min$, max$, includeMin$, includeMax$) {
    this[min] = min$;
    this[max] = max$;
    this[includeMin] = includeMin$;
    this[includeMax] = includeMax$;
    ;
  }).prototype = version_range.VersionRange.prototype;
  dart.addRtiResources(version_range.VersionRange, ["pub_semver__src__version_range|VersionRange", "core|Comparable", "pub_semver__src__version_constraint|VersionConstraint"]);
  dart.setMethodSignature(version_range.VersionRange, () => dart.global.Object.setPrototypeOf({
    allows: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool(pub_semver__src__version|Version)", true),
    allowsAll: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool(pub_semver__src__version_constraint|VersionConstraint)", true),
    allowsAny: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool(pub_semver__src__version_constraint|VersionConstraint)", true),
    intersect: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "pub_semver__src__version_constraint|VersionConstraint(pub_semver__src__version_constraint|VersionConstraint)", true),
    union: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "pub_semver__src__version_constraint|VersionConstraint(pub_semver__src__version_constraint|VersionConstraint)", true),
    difference: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "pub_semver__src__version_constraint|VersionConstraint(pub_semver__src__version_constraint|VersionConstraint)", true),
    compareTo: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|int(core|Object?)", true),
    [$compareTo]: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|int(core|Object?)", true),
    [_compareMax]: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|int(pub_semver__src__version_range|VersionRange)", true)
  }, dart.getMethods(dart.global.Object.getPrototypeOf(version_range.VersionRange))));
  dart.setStaticMethodSignature(version_range.VersionRange, () => ['new']);
  dart.setGetterSignature(version_range.VersionRange, () => dart.global.Object.setPrototypeOf({
    isEmpty: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool", true),
    isAny: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool", true)
  }, dart.getGetters(dart.global.Object.getPrototypeOf(version_range.VersionRange))));
  dart.setLibraryUri(version_range.VersionRange, I[4]);
  dart.setFieldSignature(version_range.VersionRange, () => dart.global.Object.setPrototypeOf({
    min: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "pub_semver__src__version|Version?", true),
      isConst: false,
      isFinal: true,
      libraryUri: I[5]
    },
    max: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "pub_semver__src__version|Version?", true),
      isConst: false,
      isFinal: true,
      libraryUri: I[5]
    },
    includeMin: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool", true),
      isConst: false,
      isFinal: true,
      libraryUri: I[2]
    },
    includeMax: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool", true),
      isConst: false,
      isFinal: true,
      libraryUri: I[2]
    }
  }, dart.getFields(dart.global.Object.getPrototypeOf(version_range.VersionRange))));
  dart.defineExtensionMethods(version_range.VersionRange, ['_equals', 'compareTo', 'toString']);
  dart.defineExtensionAccessors(version_range.VersionRange, ['hashCode']);
  version_range.CompatibleWithVersionRange = class CompatibleWithVersionRange extends version_range.VersionRange {
    static ['_#new#tearOff'](version) {
      return new version_range.CompatibleWithVersionRange.new(version);
    }
    toString() {
      return "^" + dart.str(this.min);
    }
  };
  (version_range.CompatibleWithVersionRange.new = function(version) {
    dart.global.Object.getPrototypeOf(version_range.CompatibleWithVersionRange).__.call(this, version, version.nextBreaking.firstPreRelease, true, false);
    ;
  }).prototype = version_range.CompatibleWithVersionRange.prototype;
  dart.addRtiResources(version_range.CompatibleWithVersionRange, ["pub_semver__src__version_range|CompatibleWithVersionRange"]);
  dart.setLibraryUri(version_range.CompatibleWithVersionRange, I[4]);
  dart.defineExtensionMethods(version_range.CompatibleWithVersionRange, ['toString']);
  var FormatException_offset = dart.privateName(core, "FormatException.offset");
  var FormatException_source = dart.privateName(core, "FormatException.source");
  var FormatException_message = dart.privateName(core, "FormatException.message");
  version_constraint.VersionConstraint = class VersionConstraint extends core.Object {
    static parse(text) {
      let t$362;
      let originalText = text;
      function skipWhitespace() {
        text = text[$trim]();
      }
      dart.fn(skipWhitespace, dart_rti._Universe.eval(dart_rti._theUniverse(), "~()", true));
      skipWhitespace();
      if (text === "any") return version_constraint.VersionConstraint.any;
      function matchVersion() {
        let version$ = patterns.startVersion.firstMatch(text);
        if (version$ == null) return null;
        text = text[$substring](version$.end);
        return version.Version.parse(dart.nullCheck(version$._get(0)));
      }
      dart.fn(matchVersion, dart_rti._Universe.eval(dart_rti._theUniverse(), "pub_semver__src__version|Version?()", true));
      function matchComparison() {
        let comparison = patterns.startComparison.firstMatch(text);
        if (comparison == null) return null;
        let op = dart.nullCheck(comparison._get(0));
        text = text[$substring](comparison.end);
        skipWhitespace();
        let version = matchVersion();
        if (version == null) {
          dart.throw(new core.FormatException.new("Expected version number after \"" + op + "\" in " + "\"" + originalText + "\", got \"" + text + "\"."));
        }
        return (() => {
          let t$360 = null;
          let t$36$350$350 = op;
          L0: {
            {
              if ("<=" === t$36$350$350) {
                t$360 = version_range.VersionRange.new({max: version, includeMax: true});
                break L0;
              }
            }
            {
              if ("<" === t$36$350$350) {
                t$360 = version_range.VersionRange.new({max: version, alwaysIncludeMaxPreRelease: true});
                break L0;
              }
            }
            {
              if (">=" === t$36$350$350) {
                t$360 = version_range.VersionRange.new({min: version, includeMin: true});
                break L0;
              }
            }
            {
              if (">" === t$36$350$350) {
                t$360 = version_range.VersionRange.new({min: version});
                break L0;
              }
            }
            {
              {
                t$360 = dart.throw(new core.UnsupportedError.new(op));
                break L0;
              }
            }
          }
          return t$360;
        })();
      }
      dart.fn(matchComparison, dart_rti._Universe.eval(dart_rti._theUniverse(), "pub_semver__src__version_range|VersionRange?()", true));
      function matchCompatibleWith() {
        if (!text[$startsWith]("^")) return null;
        text = text[$substring]("^".length);
        skipWhitespace();
        let version = matchVersion();
        if (version == null) {
          dart.throw(new core.FormatException.new("Expected version number after " + "\"" + "^" + "\" in \"" + originalText + "\", got \"" + text + "\"."));
        }
        if (text[$isNotEmpty]) {
          dart.throw(new core.FormatException.new("Cannot include other constraints with " + "\"" + "^" + "\" constraint in \"" + originalText + "\"."));
        }
        return version_constraint.VersionConstraint.compatibleWith(version);
      }
      dart.fn(matchCompatibleWith, dart_rti._Universe.eval(dart_rti._theUniverse(), "pub_semver__src__version_constraint|VersionConstraint?()", true));
      let compatibleWith = matchCompatibleWith();
      if (compatibleWith != null) return compatibleWith;
      let min = null;
      let includeMin = false;
      let max = null;
      let includeMax = false;
      for (;;) {
        skipWhitespace();
        if (text[$isEmpty]) break;
        let newRange = (t$362 = matchVersion(), t$362 == null ? matchComparison() : t$362);
        if (newRange == null) {
          dart.throw(new core.FormatException.new("Could not parse version \"" + originalText + "\". " + "Unknown text at \"" + text + "\"."));
        }
        if (newRange.min != null) {
          if (min == null || dart.nullCheck(newRange.min)['>'](min)) {
            min = newRange.min;
            includeMin = newRange.includeMin;
          } else if (dart.equals(newRange.min, min) && !newRange.includeMin) {
            includeMin = false;
          }
        }
        if (newRange.max != null) {
          if (max == null || dart.nullCheck(newRange.max)['<'](max)) {
            max = newRange.max;
            includeMax = newRange.includeMax;
          } else if (dart.equals(newRange.max, max) && !newRange.includeMax) {
            includeMax = false;
          }
        }
      }
      if (min == null && max == null) {
        dart.throw(C[2] || CT.C2);
      }
      if (min != null && max != null) {
        if (min['>'](max)) return version_constraint.VersionConstraint.empty;
        if (dart.equals(min, max)) {
          if (includeMin && includeMax) return min;
          return version_constraint.VersionConstraint.empty;
        }
      }
      return version_range.VersionRange.new({min: min, includeMin: includeMin, max: max, includeMax: includeMax});
    }
    static ['_#parse#tearOff'](text) {
      return version_constraint.VersionConstraint.parse(text);
    }
    static compatibleWith(version) {
      return new version_range.CompatibleWithVersionRange.new(version);
    }
    static ['_#compatibleWith#tearOff'](version) {
      return version_constraint.VersionConstraint.compatibleWith(version);
    }
    static intersection(constraints) {
      let constraint = version_range.VersionRange.new();
      for (let other of constraints) {
        constraint = dart_rti._Universe.eval(dart_rti._theUniverse(), "pub_semver__src__version_range|VersionRange", true)[_as](constraint.intersect(other));
      }
      return constraint;
    }
    static ['_#intersection#tearOff'](constraints) {
      return version_constraint.VersionConstraint.intersection(constraints);
    }
    static unionOf(constraints) {
      let flattened = constraints[$expand](dart_rti._Universe.eval(dart_rti._theUniverse(), "pub_semver__src__version_range|VersionRange", true), dart.fn(constraint => {
        if (constraint.isEmpty) return _interceptors.JSArray.of(dart_rti._Universe.eval(dart_rti._theUniverse(), "_interceptors|JSArray<pub_semver__src__version_range|VersionRange>", true), []);
        if (dart_rti._Universe.eval(dart_rti._theUniverse(), "pub_semver__src__version_union|VersionUnion", true)[_is](constraint)) return constraint.ranges;
        if (dart_rti._Universe.eval(dart_rti._theUniverse(), "pub_semver__src__version_range|VersionRange", true)[_is](constraint)) return _interceptors.JSArray.of(dart_rti._Universe.eval(dart_rti._theUniverse(), "_interceptors|JSArray<pub_semver__src__version_range|VersionRange>", true), [constraint]);
        dart.throw(new core.ArgumentError.new("Unknown VersionConstraint type " + dart.str(constraint) + "."));
      }, dart_rti._Universe.eval(dart_rti._theUniverse(), "core|List<pub_semver__src__version_range|VersionRange>(pub_semver__src__version_constraint|VersionConstraint)", true)))[$toList]();
      if (flattened[$isEmpty]) return version_constraint.VersionConstraint.empty;
      if (flattened[$any](dart.fn(constraint => constraint.isAny, dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool(pub_semver__src__version_range|VersionRange)", true)))) {
        return version_constraint.VersionConstraint.any;
      }
      flattened[$sort]();
      let merged = _interceptors.JSArray.of(dart_rti._Universe.eval(dart_rti._theUniverse(), "_interceptors|JSArray<pub_semver__src__version_range|VersionRange>", true), []);
      for (let constraint of flattened) {
        if (merged[$isEmpty] || !merged[$last].allowsAny(constraint) && !utils.areAdjacent(merged[$last], constraint)) {
          merged[$add](constraint);
        } else {
          merged[$_set](merged[$length] - 1, dart_rti._Universe.eval(dart_rti._theUniverse(), "pub_semver__src__version_range|VersionRange", true)[_as](merged[$last].union(constraint)));
        }
      }
      if (merged[$length] === 1) return merged[$single];
      return new version_union.VersionUnion.fromRanges(merged);
    }
    static ['_#unionOf#tearOff'](constraints) {
      return version_constraint.VersionConstraint.unionOf(constraints);
    }
  };
  (version_constraint.VersionConstraint[dart.mixinNew] = function() {
  }).prototype = version_constraint.VersionConstraint.prototype;
  dart.addRtiResources(version_constraint.VersionConstraint, ["pub_semver__src__version_constraint|VersionConstraint"]);
  dart.setStaticMethodSignature(version_constraint.VersionConstraint, () => ['parse', 'compatibleWith', 'intersection', 'unionOf']);
  dart.setLibraryUri(version_constraint.VersionConstraint, I[6]);
  dart.setStaticFieldSignature(version_constraint.VersionConstraint, () => ['any', 'empty']);
  dart.defineLazy(version_constraint.VersionConstraint, {
    /*version_constraint.VersionConstraint.any*/get any() {
      return version_range.VersionRange.new();
    },
    set any(value) {},
    /*version_constraint.VersionConstraint.empty*/get empty() {
      return C[3] || CT.C3;
    },
    set empty(value) {}
  });
  version_constraint._EmptyVersion = class _EmptyVersion extends core.Object {
    static ['_#new#tearOff']() {
      return new version_constraint._EmptyVersion.new();
    }
    get isEmpty() {
      return true;
    }
    get isAny() {
      return false;
    }
    allows(other) {
      return false;
    }
    allowsAll(other) {
      return other.isEmpty;
    }
    allowsAny(other) {
      return false;
    }
    intersect(other) {
      return this;
    }
    union(other) {
      return other;
    }
    difference(other) {
      return this;
    }
    toString() {
      return "<empty>";
    }
  };
  (version_constraint._EmptyVersion.new = function() {
    ;
  }).prototype = version_constraint._EmptyVersion.prototype;
  dart.addRtiResources(version_constraint._EmptyVersion, ["pub_semver__src__version_constraint|_EmptyVersion", "pub_semver__src__version_constraint|VersionConstraint"]);
  dart.setMethodSignature(version_constraint._EmptyVersion, () => dart.global.Object.setPrototypeOf({
    allows: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool(pub_semver__src__version|Version)", true),
    allowsAll: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool(pub_semver__src__version_constraint|VersionConstraint)", true),
    allowsAny: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool(pub_semver__src__version_constraint|VersionConstraint)", true),
    intersect: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "pub_semver__src__version_constraint|VersionConstraint(pub_semver__src__version_constraint|VersionConstraint)", true),
    union: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "pub_semver__src__version_constraint|VersionConstraint(pub_semver__src__version_constraint|VersionConstraint)", true),
    difference: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "pub_semver__src__version_constraint|VersionConstraint(pub_semver__src__version_constraint|VersionConstraint)", true)
  }, dart.getMethods(dart.global.Object.getPrototypeOf(version_constraint._EmptyVersion))));
  dart.setGetterSignature(version_constraint._EmptyVersion, () => dart.global.Object.setPrototypeOf({
    isEmpty: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool", true),
    isAny: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool", true)
  }, dart.getGetters(dart.global.Object.getPrototypeOf(version_constraint._EmptyVersion))));
  dart.setLibraryUri(version_constraint._EmptyVersion, I[6]);
  dart.defineExtensionMethods(version_constraint._EmptyVersion, ['toString']);
  var major = dart.privateName(version, "Version.major");
  var minor = dart.privateName(version, "Version.minor");
  var patch = dart.privateName(version, "Version.patch");
  var preRelease = dart.privateName(version, "Version.preRelease");
  var build = dart.privateName(version, "Version.build");
  var _text = dart.privateName(version, "_text");
  var _incrementMajor = dart.privateName(version, "_incrementMajor");
  var _incrementMinor = dart.privateName(version, "_incrementMinor");
  var _incrementPatch = dart.privateName(version, "_incrementPatch");
  var _compareLists = dart.privateName(version, "_compareLists");
  var _compareMax$ = dart.privateName(version, "_compareMax");
  version.Version = class Version extends core.Object {
    get major() {
      return this[major];
    }
    set major(value) {
      super.major = value;
    }
    get minor() {
      return this[minor];
    }
    set minor(value) {
      super.minor = value;
    }
    get patch() {
      return this[patch];
    }
    set patch(value) {
      super.patch = value;
    }
    get preRelease() {
      return this[preRelease];
    }
    set preRelease(value) {
      super.preRelease = value;
    }
    get build() {
      return this[build];
    }
    set build(value) {
      super.build = value;
    }
    static get none() {
      return version.Version.new(0, 0, 0);
    }
    static prioritize(a, b) {
      if (a.isPreRelease && !b.isPreRelease) return -1;
      if (!a.isPreRelease && b.isPreRelease) return 1;
      return a.compareTo(b);
    }
    static antiprioritize(a, b) {
      if (a.isPreRelease && !b.isPreRelease) return -1;
      if (!a.isPreRelease && b.isPreRelease) return 1;
      return b.compareTo(a);
    }
    get min() {
      return this;
    }
    get max() {
      return this;
    }
    get includeMin() {
      return true;
    }
    get includeMax() {
      return true;
    }
    static ['_#_#tearOff'](major, minor, patch, preRelease, build, _text) {
      return new version.Version.__(major, minor, patch, preRelease, build, _text);
    }
    static ['_#new#tearOff'](major, minor, patch, opts) {
      let pre = opts && 'pre' in opts ? opts.pre : null;
      let build = opts && 'build' in opts ? opts.build : null;
      return version.Version.new(major, minor, patch, {pre: pre, build: build});
    }
    static new(major, minor, patch, opts) {
      let pre = opts && 'pre' in opts ? opts.pre : null;
      let build = opts && 'build' in opts ? opts.build : null;
      let text = dart.strSafe(major) + "." + dart.strSafe(minor) + "." + dart.strSafe(patch);
      if (pre != null) text = text + ("-" + dart.str(pre));
      if (build != null) text = text + ("+" + dart.str(build));
      return new version.Version.__(major, minor, patch, pre, build, text);
    }
    static ['_#parse#tearOff'](text) {
      return version.Version.parse(text);
    }
    static parse(text) {
      let match = patterns.completeVersion.firstMatch(text);
      if (match == null) {
        dart.throw(new core.FormatException.new("Could not parse \"" + text + "\"."));
      }
      try {
        let major = core.int.parse(dart.nullCheck(match._get(1)));
        let minor = core.int.parse(dart.nullCheck(match._get(2)));
        let patch = core.int.parse(dart.nullCheck(match._get(3)));
        let preRelease = match._get(5);
        let build = match._get(8);
        return new version.Version.__(major, minor, patch, preRelease, build, text);
      } catch (t$36$35e) {
        let t$36$35ex = dart.getThrown(t$36$35e);
        if (dart_rti._Universe.eval(dart_rti._theUniverse(), "core|FormatException", true)[_is](t$36$35ex)) {
          dart.throw(new core.FormatException.new("Could not parse \"" + text + "\"."));
        } else
          throw t$36$35e;
      }
    }
    static primary(versions) {
      let primary = versions[$first];
      for (let version of versions[$skip](1)) {
        if (!version.isPreRelease && primary.isPreRelease || version.isPreRelease === primary.isPreRelease && version['>'](primary)) {
          primary = version;
        }
      }
      return primary;
    }
    static _splitParts(text) {
      return text[$split](".")[$map](dart_rti._Universe.eval(dart_rti._theUniverse(), "core|Object", true), dart.fn(part => {
        let t$364;
        t$364 = core.int.tryParse(part);
        return t$364 == null ? part : t$364;
      }, dart_rti._Universe.eval(dart_rti._theUniverse(), "core|Object(core|String)", true)))[$toList]();
    }
    _equals(other) {
      if (other == null) return false;
      return dart_rti._Universe.eval(dart_rti._theUniverse(), "pub_semver__src__version|Version", true)[_is](other) && this.major === other.major && this.minor === other.minor && this.patch === other.patch && version._equality.equals(this.preRelease, other.preRelease) && version._equality.equals(this.build, other.build);
    }
    get hashCode() {
      return (this.major ^ this.minor ^ this.patch ^ version._equality.hash(this.preRelease) ^ version._equality.hash(this.build)) >>> 0;
    }
    ['<'](other) {
      return this.compareTo(other) < 0;
    }
    ['>'](other) {
      return this.compareTo(other) > 0;
    }
    ['<='](other) {
      return this.compareTo(other) <= 0;
    }
    ['>='](other) {
      return this.compareTo(other) >= 0;
    }
    get isAny() {
      return false;
    }
    get isEmpty() {
      return false;
    }
    get isPreRelease() {
      return this.preRelease[$isNotEmpty];
    }
    get nextMajor() {
      if (this.isPreRelease && this.minor === 0 && this.patch === 0) {
        return version.Version.new(this.major, this.minor, this.patch);
      }
      return this[_incrementMajor]();
    }
    get nextMinor() {
      if (this.isPreRelease && this.patch === 0) {
        return version.Version.new(this.major, this.minor, this.patch);
      }
      return this[_incrementMinor]();
    }
    get nextPatch() {
      if (this.isPreRelease) {
        return version.Version.new(this.major, this.minor, this.patch);
      }
      return this[_incrementPatch]();
    }
    get nextBreaking() {
      if (this.major === 0) {
        return this[_incrementMinor]();
      }
      return this[_incrementMajor]();
    }
    get firstPreRelease() {
      return version.Version.new(this.major, this.minor, this.patch, {pre: "0"});
    }
    get isFirstPreRelease() {
      return this.preRelease[$length] === 1 && dart.equals(this.preRelease[$first], 0);
    }
    [_incrementMajor]() {
      return version.Version.new(this.major + 1, 0, 0);
    }
    [_incrementMinor]() {
      return version.Version.new(this.major, this.minor + 1, 0);
    }
    [_incrementPatch]() {
      return version.Version.new(this.major, this.minor, this.patch + 1);
    }
    allows(other) {
      return dart.equals(this, other);
    }
    allowsAll(other) {
      return other.isEmpty || dart.equals(other, this);
    }
    allowsAny(other) {
      return other.allows(this);
    }
    intersect(other) {
      return other.allows(this) ? this : version_constraint.VersionConstraint.empty;
    }
    union(other) {
      if (other.allows(this)) return other;
      if (dart_rti._Universe.eval(dart_rti._theUniverse(), "pub_semver__src__version_range|VersionRange", true)[_is](other)) {
        if (dart.equals(other.min, this)) {
          return version_range.VersionRange.new({min: other.min, max: other.max, includeMin: true, includeMax: other.includeMax, alwaysIncludeMaxPreRelease: true});
        }
        if (dart.equals(other.max, this)) {
          return version_range.VersionRange.new({min: other.min, max: other.max, includeMin: other.includeMin, includeMax: true, alwaysIncludeMaxPreRelease: true});
        }
      }
      return version_constraint.VersionConstraint.unionOf(_interceptors.JSArray.of(dart_rti._Universe.eval(dart_rti._theUniverse(), "_interceptors|JSArray<pub_semver__src__version_constraint|VersionConstraint>", true), [this, other]));
    }
    difference(other) {
      return other.allows(this) ? version_constraint.VersionConstraint.empty : this;
    }
    compareTo(other) {
      dart_rti._Universe.eval(dart_rti._theUniverse(), "pub_semver__src__version_range|VersionRange", true)[_as](other);
      if (dart_rti._Universe.eval(dart_rti._theUniverse(), "pub_semver__src__version|Version", true)[_is](other)) {
        if (this.major !== other.major) return this.major[$compareTo](other.major);
        if (this.minor !== other.minor) return this.minor[$compareTo](other.minor);
        if (this.patch !== other.patch) return this.patch[$compareTo](other.patch);
        if (!this.isPreRelease && other.isPreRelease) return 1;
        if (!other.isPreRelease && this.isPreRelease) return -1;
        let comparison = this[_compareLists](this.preRelease, other.preRelease);
        if (comparison !== 0) return comparison;
        if (this.build[$isEmpty] && other.build[$isNotEmpty]) return -1;
        if (other.build[$isEmpty] && this.build[$isNotEmpty]) return 1;
        return this[_compareLists](this.build, other.build);
      } else {
        return -other.compareTo(this);
      }
    }
    toString() {
      return this[_text];
    }
    get canonicalizedVersion() {
      return dart.toString(version.Version.new(this.major, this.minor, this.patch, {pre: this.preRelease[$isNotEmpty] ? this.preRelease[$join](".") : null, build: this.build[$isNotEmpty] ? this.build[$join](".") : null}));
    }
    [_compareLists](a, b) {
      for (let i = 0; i < math.max(dart_rti._Universe.eval(dart_rti._theUniverse(), "core|num", true), a[$length], b[$length]); i = i + 1) {
        let aPart = i < a[$length] ? a[$_get](i) : null;
        let bPart = i < b[$length] ? b[$_get](i) : null;
        if (dart.equals(aPart, bPart)) continue;
        if (aPart == null) return -1;
        if (bPart == null) return 1;
        if (typeof aPart == 'number') {
          if (typeof bPart == 'number') {
            return aPart[$compareTo](bPart);
          } else {
            return -1;
          }
        } else {
          if (typeof bPart == 'number') {
            return 1;
          } else {
            return dart_rti._Universe.eval(dart_rti._theUniverse(), "core|String", true)[_as](aPart)[$compareTo](dart_rti._Universe.eval(dart_rti._theUniverse(), "core|String", true)[_as](bPart));
          }
        }
      }
      return 0;
    }
    [_compareMax](other) {
      return dart.throw(core.NoSuchMethodError.withInvocation(this, new core._Invocation.method(C[4] || CT.C4, null, [other], null)));
    }
  };
  (version.Version.__ = function(major$, minor$, patch$, preRelease$, build$, _text$) {
    this[major] = major$;
    this[minor] = minor$;
    this[patch] = patch$;
    this[_text] = _text$;
    this[preRelease] = preRelease$ == null || preRelease$[$isEmpty] ? _interceptors.JSArray.of(dart_rti._Universe.eval(dart_rti._theUniverse(), "_interceptors|JSArray<core|Object>", true), []) : version.Version._splitParts(preRelease$);
    this[build] = build$ == null || build$[$isEmpty] ? _interceptors.JSArray.of(dart_rti._Universe.eval(dart_rti._theUniverse(), "_interceptors|JSArray<core|Object>", true), []) : version.Version._splitParts(build$);
    if (this.major < 0) dart.throw(new core.ArgumentError.new("Major version must be non-negative."));
    if (this.minor < 0) dart.throw(new core.ArgumentError.new("Minor version must be non-negative."));
    if (this.patch < 0) dart.throw(new core.ArgumentError.new("Patch version must be non-negative."));
  }).prototype = version.Version.prototype;
  dart.addRtiResources(version.Version, ["pub_semver__src__version|Version", "pub_semver__src__version_constraint|VersionConstraint", "pub_semver__src__version_range|VersionRange", "core|Comparable"]);
  dart.setMethodSignature(version.Version, () => dart.global.Object.setPrototypeOf({
    '<': _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool(pub_semver__src__version|Version)", true),
    '>': _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool(pub_semver__src__version|Version)", true),
    '<=': _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool(pub_semver__src__version|Version)", true),
    '>=': _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool(pub_semver__src__version|Version)", true),
    [_incrementMajor]: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "pub_semver__src__version|Version()", true),
    [_incrementMinor]: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "pub_semver__src__version|Version()", true),
    [_incrementPatch]: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "pub_semver__src__version|Version()", true),
    allows: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool(pub_semver__src__version|Version)", true),
    allowsAll: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool(pub_semver__src__version_constraint|VersionConstraint)", true),
    allowsAny: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool(pub_semver__src__version_constraint|VersionConstraint)", true),
    intersect: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "pub_semver__src__version_constraint|VersionConstraint(pub_semver__src__version_constraint|VersionConstraint)", true),
    union: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "pub_semver__src__version_constraint|VersionConstraint(pub_semver__src__version_constraint|VersionConstraint)", true),
    difference: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "pub_semver__src__version_constraint|VersionConstraint(pub_semver__src__version_constraint|VersionConstraint)", true),
    compareTo: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|int(core|Object?)", true),
    [$compareTo]: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|int(core|Object?)", true),
    [_compareLists]: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|int(core|List<core|Object>,core|List<core|Object>)", true),
    [_compareMax]: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|int(pub_semver__src__version_range|VersionRange)", true)
  }, dart.getMethods(dart.global.Object.getPrototypeOf(version.Version))));
  dart.setStaticMethodSignature(version.Version, () => ['prioritize', 'antiprioritize', 'new', 'parse', 'primary', '_splitParts']);
  dart.setGetterSignature(version.Version, () => dart.global.Object.setPrototypeOf({
    min: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "pub_semver__src__version|Version", true),
    max: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "pub_semver__src__version|Version", true),
    includeMin: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool", true),
    includeMax: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool", true),
    isAny: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool", true),
    isEmpty: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool", true),
    isPreRelease: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool", true),
    nextMajor: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "pub_semver__src__version|Version", true),
    nextMinor: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "pub_semver__src__version|Version", true),
    nextPatch: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "pub_semver__src__version|Version", true),
    nextBreaking: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "pub_semver__src__version|Version", true),
    firstPreRelease: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "pub_semver__src__version|Version", true),
    isFirstPreRelease: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|bool", true),
    canonicalizedVersion: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|String", true)
  }, dart.getGetters(dart.global.Object.getPrototypeOf(version.Version))));
  dart.setStaticGetterSignature(version.Version, () => ['none']);
  dart.setLibraryUri(version.Version, I[5]);
  dart.setFieldSignature(version.Version, () => dart.global.Object.setPrototypeOf({
    major: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|int", true),
      isConst: false,
      isFinal: true,
      libraryUri: I[2]
    },
    minor: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|int", true),
      isConst: false,
      isFinal: true,
      libraryUri: I[2]
    },
    patch: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|int", true),
      isConst: false,
      isFinal: true,
      libraryUri: I[2]
    },
    preRelease: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|List<core|Object>", true),
      isConst: false,
      isFinal: true,
      libraryUri: I[2]
    },
    build: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|List<core|Object>", true),
      isConst: false,
      isFinal: true,
      libraryUri: I[2]
    },
    [_text]: {
      type: _ti => dart_rti._Universe.eval(dart_rti._theUniverse(), "core|String", true),
      isConst: false,
      isFinal: true,
      libraryUri: I[2]
    }
  }, dart.getFields(dart.global.Object.getPrototypeOf(version.Version))));
  dart.defineExtensionMethods(version.Version, ['_equals', 'compareTo', 'toString']);
  dart.defineExtensionAccessors(version.Version, ['hashCode']);
  var IterableEquality__elementEquality = dart.privateName(equality, "IterableEquality._elementEquality");
  dart.defineLazy(version, {
    /*version._equality*/get _equality() {
      return C[5] || CT.C5;
    }
  });
  dart.defineLazy(patterns, {
    /*patterns.startVersion*/get startVersion() {
      return core.RegExp.new("^(\\d+)\\.(\\d+)\\.(\\d+)(-([0-9A-Za-z-]+(\\.[0-9A-Za-z-]+)*))?(\\+([0-9A-Za-z-]+(\\.[0-9A-Za-z-]+)*))?");
    },
    /*patterns.completeVersion*/get completeVersion() {
      return core.RegExp.new(patterns.startVersion.pattern + "$");
    },
    /*patterns.startComparison*/get startComparison() {
      return core.RegExp.new("^[<>]=?");
    },
    /*patterns.compatibleWithChar*/get compatibleWithChar() {
      return "^";
    }
  });
  utils.areAdjacent = function areAdjacent(range1, range2) {
    if (!dart.equals(range1.max, range2.min)) return false;
    return range1.includeMax && !range2.includeMin || !range1.includeMax && range2.includeMin;
  };
  utils.allowsLower = function allowsLower(range1, range2) {
    if (range1.min == null) return range2.min != null;
    if (range2.min == null) return false;
    let comparison = dart.nullCheck(range1.min).compareTo(dart.nullCheck(range2.min));
    if (comparison === -1) return true;
    if (comparison === 1) return false;
    return range1.includeMin && !range2.includeMin;
  };
  utils.allowsHigher = function allowsHigher(range1, range2) {
    if (range1.max == null) return range2.max != null;
    if (range2.max == null) return false;
    let comparison = dart.nullCheck(range1.max).compareTo(dart.nullCheck(range2.max));
    if (comparison === 1) return true;
    if (comparison === -1) return false;
    return range1.includeMax && !range2.includeMax;
  };
  utils.strictlyLower = function strictlyLower(range1, range2) {
    if (range1.max == null || range2.min == null) return false;
    let comparison = dart.nullCheck(range1.max).compareTo(dart.nullCheck(range2.min));
    if (comparison === -1) return true;
    if (comparison === 1) return false;
    return !range1.includeMax || !range2.includeMin;
  };
  utils.strictlyHigher = function strictlyHigher(range1, range2) {
    return utils.strictlyLower(range2, range1);
  };
  utils.equalsWithoutPreRelease = function equalsWithoutPreRelease(version1, version2) {
    return version1.major === version2.major && version1.minor === version2.minor && version1.patch === version2.patch;
  };
  dart.moduleConstCaches.set("packages/pub_semver/pub_semver", C);
  dart_rti._Universe.addRules(dart.typeUniverse, JSON.parse('{"pub_semver__src__version_range|VersionRange":{"Comparable.T":"pub_semver__src__version_range|VersionRange","core|Comparable":["pub_semver__src__version_range|VersionRange"],"pub_semver__src__version_constraint|VersionConstraint":[]},"core|Comparable":{"Comparable.T":"1"},"_interceptors|JSArray":{"JSArray.E":"1","_interceptors|JavaScriptObject":[],"List.E":"1","core|List":["1"],"JSIndexable.E":"1","_interceptors|JSIndexable":["1"],"_js_helper|TrustedGetRuntimeType":[],"_interceptors|Interceptor":[],"_interceptors|JSObject":[],"Iterable.E":"1","core|Iterable":["1"],"_ListIterable.E":"1","core|_ListIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"_interceptors|JavaScriptObject":{"_interceptors|Interceptor":[],"_interceptors|JSObject":[]},"core|List":{"List.E":"1","Iterable.E":"1","core|Iterable":["1"],"_ListIterable.E":"1","core|_ListIterable":["1"],"EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"]},"_interceptors|JSIndexable":{"JSIndexable.E":"1"},"core|Iterable":{"Iterable.E":"1"},"core|_ListIterable":{"_ListIterable.E":"1","EfficientLengthIterable.T":"1","_internal|EfficientLengthIterable":["1"],"HideEfficientLengthIterable.T":"1","_internal|HideEfficientLengthIterable":["1"],"Iterable.E":"1","core|Iterable":["1"]},"_internal|EfficientLengthIterable":{"EfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"_internal|HideEfficientLengthIterable":{"HideEfficientLengthIterable.T":"1","Iterable.E":"1","core|Iterable":["1"]},"pub_semver__src__version_union|VersionUnion":{"pub_semver__src__version_constraint|VersionConstraint":[]},"collection__src__equality|ListEquality":{"ListEquality.E":"1","Equality.E":"core|List<1>","collection__src__equality|Equality":["core|List<1>"]},"collection__src__equality|Equality":{"Equality.E":"1"},"collection__src__equality|DefaultEquality":{"DefaultEquality.E":"1","Equality.E":"1","collection__src__equality|Equality":["1"]},"pub_semver__src__version|Version":{"pub_semver__src__version_constraint|VersionConstraint":[],"pub_semver__src__version_range|VersionRange":[],"Comparable.T":"pub_semver__src__version_range|VersionRange","core|Comparable":["pub_semver__src__version_range|VersionRange"]},"core|int":{"core|num":[],"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|num":{"Comparable.T":"core|num","core|Comparable":["core|num"]},"core|String":{"Comparable.T":"core|String","core|Comparable":["core|String"],"core|Pattern":[]},"core|FormatException":{"core|Exception":[]},"collection__src__equality|IterableEquality":{"IterableEquality.E":"1","Equality.E":"core|Iterable<1>","collection__src__equality|Equality":["core|Iterable<1>"]},"pub_semver__src__version_range|CompatibleWithVersionRange":{"pub_semver__src__version_range|VersionRange":[],"Comparable.T":"pub_semver__src__version_range|VersionRange","core|Comparable":["pub_semver__src__version_range|VersionRange"],"pub_semver__src__version_constraint|VersionConstraint":[]},"pub_semver__src__version_constraint|_EmptyVersion":{"pub_semver__src__version_constraint|VersionConstraint":[]}}'));
  dart.trackLibraries("packages/pub_semver/pub_semver", {
    "package:pub_semver/src/version_union.dart": version_union,
    "package:pub_semver/src/version_range.dart": version_range,
    "package:pub_semver/src/version_constraint.dart": version_constraint,
    "package:pub_semver/src/version.dart": version,
    "package:pub_semver/src/patterns.dart": patterns,
    "package:pub_semver/src/utils.dart": utils,
    "package:pub_semver/pub_semver.dart": pub_semver
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["src/version_union.dart","src/version_range.dart","src/version_constraint.dart","src/version.dart","src/patterns.dart","src/utils.dart"],"names":[],"mappings":"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","file":"pub_semver.ddc.js"}');
  // Exports:
  return {
    src__version_union: version_union,
    src__version_range: version_range,
    src__version_constraint: version_constraint,
    src__version: version,
    src__patterns: patterns,
    src__utils: utils,
    pub_semver: pub_semver
  };
}));

//# sourceMappingURL=pub_semver.ddc.js.map
